use sdl::render::{Renderer, Texture};
use std::ptr;
use std::str::raw::from_c_str;

mod ll {
    /* automatically generated by rust-bindgen */

    use std::libc::*;
    pub use sdl::ll::*;
    pub type IMG_InitFlags = c_uint;
    pub static IMG_INIT_JPG: c_uint = 1;
    pub static IMG_INIT_PNG: c_uint = 2;
    pub static IMG_INIT_TIF: c_uint = 4;
    pub static IMG_INIT_WEBP: c_uint = 8;

    #[link_args="-framework SDL2_image"]
    extern "C" {
        pub fn IMG_Linked_Version() -> *SDL_version;
        pub fn IMG_Init(flags: c_int) -> c_int;
        pub fn IMG_Quit();
        pub fn IMG_LoadTyped_RW(src: *mut SDL_RWops, freesrc: c_int,
                                _type: *c_schar) -> *mut SDL_Surface;
        pub fn IMG_Load(file: *c_schar) -> *mut SDL_Surface;
        pub fn IMG_Load_RW(src: *mut SDL_RWops, freesrc: c_int) ->
         *mut SDL_Surface;
        pub fn IMG_LoadTexture(renderer: *mut SDL_Renderer, file: *c_schar) ->
         *mut SDL_Texture;
        pub fn IMG_LoadTexture_RW(renderer: *mut SDL_Renderer,
                                  src: *mut SDL_RWops, freesrc: c_int) ->
         *mut SDL_Texture;
        pub fn IMG_LoadTextureTyped_RW(renderer: *mut SDL_Renderer,
                                       src: *mut SDL_RWops, freesrc: c_int,
                                       _type: *c_schar) -> *mut SDL_Texture;
        pub fn IMG_isICO(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isCUR(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isBMP(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isGIF(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isJPG(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isLBM(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isPCX(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isPNG(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isPNM(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isTIF(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isXCF(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isXPM(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isXV(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_isWEBP(src: *mut SDL_RWops) -> c_int;
        pub fn IMG_LoadICO_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadCUR_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadBMP_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadGIF_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadJPG_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadLBM_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadPCX_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadPNG_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadPNM_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadTGA_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadTIF_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadXCF_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadXPM_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadXV_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_LoadWEBP_RW(src: *mut SDL_RWops) -> *mut SDL_Surface;
        pub fn IMG_ReadXPMFromArray(xpm: *mut *mut c_schar) -> *mut SDL_Surface;
        pub fn IMG_SavePNG(surface: *mut SDL_Surface, file: *c_schar) -> c_int;
        pub fn IMG_SavePNG_RW(surface: *mut SDL_Surface, dst: *mut SDL_RWops,
                              freedst: c_int) -> c_int;
    }
}

#[fixed_stack_segment]
pub fn load_texture<'a>(renderer: &'a Renderer, path: &Path) -> Result<~Texture<'a>, ~str> {
    unsafe {
        let p = do path.with_c_str |s| {
            ll::IMG_LoadTexture(renderer.p_renderer, s)
        };
        if ptr::is_null(p) {
            return Err(from_c_str(ll::SDL_GetError()));
        }
        Ok(~Texture {parent: renderer, p_texture: p})
    }
}
