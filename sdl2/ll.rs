/* automatically generated by rust-bindgen */

use std::libc::*;
use std;
pub type SDL_bool = c_uint;
pub static SDL_FALSE: c_uint = 0;
pub static SDL_TRUE: c_uint = 1;
pub type Sint8 = int8_t;
pub type Uint8 = uint8_t;
pub type Sint16 = int16_t;
pub type Uint16 = uint16_t;
pub type Sint32 = int32_t;
pub type Uint32 = uint32_t;
pub type Sint64 = int64_t;
pub type Uint64 = uint64_t;
pub type SDL_dummy_uint8 = [c_int, ..1u];
pub type SDL_dummy_sint8 = [c_int, ..1u];
pub type SDL_dummy_uint16 = [c_int, ..1u];
pub type SDL_dummy_sint16 = [c_int, ..1u];
pub type SDL_dummy_uint32 = [c_int, ..1u];
pub type SDL_dummy_sint32 = [c_int, ..1u];
pub type SDL_dummy_uint64 = [c_int, ..1u];
pub type SDL_dummy_sint64 = [c_int, ..1u];
pub type SDL_DUMMY_ENUM = c_uint;
pub static DUMMY_ENUM_VALUE: c_uint = 0;
pub type SDL_dummy_enum = [c_int, ..1u];
pub type Struct__SDL_iconv_t = c_void;
pub type SDL_iconv_t = *mut Struct__SDL_iconv_t;
pub type SDL_assert_state = c_uint;
pub static SDL_ASSERTION_RETRY: c_uint = 0;
pub static SDL_ASSERTION_BREAK: c_uint = 1;
pub static SDL_ASSERTION_ABORT: c_uint = 2;
pub static SDL_ASSERTION_IGNORE: c_uint = 3;
pub static SDL_ASSERTION_ALWAYS_IGNORE: c_uint = 4;
pub struct Struct_SDL_assert_data {
    always_ignore: c_int,
    trigger_count: c_uint,
    condition: *c_schar,
    filename: *c_schar,
    linenum: c_int,
    function: *c_schar,
    next: *Struct_SDL_assert_data,
}
pub type SDL_assert_data = Struct_SDL_assert_data;
pub type SDL_AssertionHandler =
    extern "C" fn(arg1: *SDL_assert_data, arg2: *mut c_void)
        -> SDL_assert_state;
pub type SDL_SpinLock = c_int;
pub struct SDL_atomic_t {
    value: c_int,
}
pub type SDL_errorcode = c_uint;
pub static SDL_ENOMEM: c_uint = 0;
pub static SDL_EFREAD: c_uint = 1;
pub static SDL_EFWRITE: c_uint = 2;
pub static SDL_EFSEEK: c_uint = 3;
pub static SDL_UNSUPPORTED: c_uint = 4;
pub static SDL_LASTERROR: c_uint = 5;
pub type Struct_SDL_mutex = c_void;
pub type SDL_mutex = Struct_SDL_mutex;
pub type Struct_SDL_semaphore = c_void;
pub type SDL_sem = Struct_SDL_semaphore;
pub type Struct_SDL_cond = c_void;
pub type SDL_cond = Struct_SDL_cond;
pub type Struct_SDL_Thread = c_void;
pub type SDL_Thread = Struct_SDL_Thread;
pub type SDL_threadID = c_ulong;
pub type SDL_TLSID = c_uint;
pub type SDL_ThreadPriority = c_uint;
pub static SDL_THREAD_PRIORITY_LOW: c_uint = 0;
pub static SDL_THREAD_PRIORITY_NORMAL: c_uint = 1;
pub static SDL_THREAD_PRIORITY_HIGH: c_uint = 2;
pub type SDL_ThreadFunction = extern "C" fn(arg1: *mut c_void) -> c_int;
pub struct Struct_SDL_RWops {
    size: extern "C" fn(arg1: *mut Struct_SDL_RWops) -> Sint64,
    seek: extern "C" fn
              (arg1: *mut Struct_SDL_RWops, arg2: Sint64, arg3: c_int)
              -> Sint64,
    read: extern "C" fn
              (arg1: *mut Struct_SDL_RWops, arg2: *mut c_void, arg3: size_t,
               arg4: size_t) -> size_t,
    write: extern "C" fn
               (arg1: *mut Struct_SDL_RWops, arg2: *c_void, arg3: size_t,
                arg4: size_t) -> size_t,
    close: extern "C" fn(arg1: *mut Struct_SDL_RWops) -> c_int,
    _type: Uint32,
    hidden: Union_Unnamed1,
}
pub struct Union_Unnamed1 {
    data: [c_uchar, ..24u],
}
impl Union_Unnamed1 {
    pub fn stdio(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn mem(&mut self) -> *mut Struct_Unnamed3 {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn unknown(&mut self) -> *mut Struct_Unnamed4 {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed2 {
    autoclose: SDL_bool,
    fp: *mut FILE,
}
pub struct Struct_Unnamed3 {
    base: *mut Uint8,
    here: *mut Uint8,
    stop: *mut Uint8,
}
pub struct Struct_Unnamed4 {
    data1: *mut c_void,
    data2: *mut c_void,
}
pub type SDL_RWops = Struct_SDL_RWops;
pub type SDL_AudioFormat = Uint16;
pub type SDL_AudioCallback =
    extern "C" fn(arg1: *mut c_void, arg2: *mut Uint8, arg3: c_int);
pub struct Struct_SDL_AudioSpec {
    freq: c_int,
    format: SDL_AudioFormat,
    channels: Uint8,
    silence: Uint8,
    samples: Uint16,
    padding: Uint16,
    size: Uint32,
    callback: SDL_AudioCallback,
    userdata: *mut c_void,
}
pub type SDL_AudioSpec = Struct_SDL_AudioSpec;
pub type SDL_AudioFilter =
    extern "C" fn(arg1: *mut Struct_SDL_AudioCVT, arg2: SDL_AudioFormat);
pub struct Struct_SDL_AudioCVT {
    needed: c_int,
    src_format: SDL_AudioFormat,
    dst_format: SDL_AudioFormat,
    rate_incr: c_double,
    buf: *mut Uint8,
    len: c_int,
    len_cvt: c_int,
    len_mult: c_int,
    len_ratio: c_double,
    filters: [SDL_AudioFilter, ..10u],
    filter_index: c_int,
}
pub type SDL_AudioCVT = Struct_SDL_AudioCVT;
pub type SDL_AudioDeviceID = Uint32;
pub type SDL_AudioStatus = c_uint;
pub static SDL_AUDIO_STOPPED: c_uint = 0;
pub static SDL_AUDIO_PLAYING: c_uint = 1;
pub static SDL_AUDIO_PAUSED: c_uint = 2;
pub type Enum_Unnamed5 = c_uint;
pub static SDL_PIXELTYPE_UNKNOWN: c_uint = 0;
pub static SDL_PIXELTYPE_INDEX1: c_uint = 1;
pub static SDL_PIXELTYPE_INDEX4: c_uint = 2;
pub static SDL_PIXELTYPE_INDEX8: c_uint = 3;
pub static SDL_PIXELTYPE_PACKED8: c_uint = 4;
pub static SDL_PIXELTYPE_PACKED16: c_uint = 5;
pub static SDL_PIXELTYPE_PACKED32: c_uint = 6;
pub static SDL_PIXELTYPE_ARRAYU8: c_uint = 7;
pub static SDL_PIXELTYPE_ARRAYU16: c_uint = 8;
pub static SDL_PIXELTYPE_ARRAYU32: c_uint = 9;
pub static SDL_PIXELTYPE_ARRAYF16: c_uint = 10;
pub static SDL_PIXELTYPE_ARRAYF32: c_uint = 11;
pub type Enum_Unnamed6 = c_uint;
pub static SDL_BITMAPORDER_NONE: c_uint = 0;
pub static SDL_BITMAPORDER_4321: c_uint = 1;
pub static SDL_BITMAPORDER_1234: c_uint = 2;
pub type Enum_Unnamed7 = c_uint;
pub static SDL_PACKEDORDER_NONE: c_uint = 0;
pub static SDL_PACKEDORDER_XRGB: c_uint = 1;
pub static SDL_PACKEDORDER_RGBX: c_uint = 2;
pub static SDL_PACKEDORDER_ARGB: c_uint = 3;
pub static SDL_PACKEDORDER_RGBA: c_uint = 4;
pub static SDL_PACKEDORDER_XBGR: c_uint = 5;
pub static SDL_PACKEDORDER_BGRX: c_uint = 6;
pub static SDL_PACKEDORDER_ABGR: c_uint = 7;
pub static SDL_PACKEDORDER_BGRA: c_uint = 8;
pub type Enum_Unnamed8 = c_uint;
pub static SDL_ARRAYORDER_NONE: c_uint = 0;
pub static SDL_ARRAYORDER_RGB: c_uint = 1;
pub static SDL_ARRAYORDER_RGBA: c_uint = 2;
pub static SDL_ARRAYORDER_ARGB: c_uint = 3;
pub static SDL_ARRAYORDER_BGR: c_uint = 4;
pub static SDL_ARRAYORDER_BGRA: c_uint = 5;
pub static SDL_ARRAYORDER_ABGR: c_uint = 6;
pub type Enum_Unnamed9 = c_uint;
pub static SDL_PACKEDLAYOUT_NONE: c_uint = 0;
pub static SDL_PACKEDLAYOUT_332: c_uint = 1;
pub static SDL_PACKEDLAYOUT_4444: c_uint = 2;
pub static SDL_PACKEDLAYOUT_1555: c_uint = 3;
pub static SDL_PACKEDLAYOUT_5551: c_uint = 4;
pub static SDL_PACKEDLAYOUT_565: c_uint = 5;
pub static SDL_PACKEDLAYOUT_8888: c_uint = 6;
pub static SDL_PACKEDLAYOUT_2101010: c_uint = 7;
pub static SDL_PACKEDLAYOUT_1010102: c_uint = 8;
pub type Enum_Unnamed10 = c_uint;
pub static SDL_PIXELFORMAT_UNKNOWN: c_uint = 0;
pub static SDL_PIXELFORMAT_INDEX1LSB: c_uint = 286261504;
pub static SDL_PIXELFORMAT_INDEX1MSB: c_uint = 287310080;
pub static SDL_PIXELFORMAT_INDEX4LSB: c_uint = 303039488;
pub static SDL_PIXELFORMAT_INDEX4MSB: c_uint = 304088064;
pub static SDL_PIXELFORMAT_INDEX8: c_uint = 318769153;
pub static SDL_PIXELFORMAT_RGB332: c_uint = 336660481;
pub static SDL_PIXELFORMAT_RGB444: c_uint = 353504258;
pub static SDL_PIXELFORMAT_RGB555: c_uint = 353570562;
pub static SDL_PIXELFORMAT_BGR555: c_uint = 357764866;
pub static SDL_PIXELFORMAT_ARGB4444: c_uint = 355602434;
pub static SDL_PIXELFORMAT_RGBA4444: c_uint = 356651010;
pub static SDL_PIXELFORMAT_ABGR4444: c_uint = 359796738;
pub static SDL_PIXELFORMAT_BGRA4444: c_uint = 360845314;
pub static SDL_PIXELFORMAT_ARGB1555: c_uint = 355667970;
pub static SDL_PIXELFORMAT_RGBA5551: c_uint = 356782082;
pub static SDL_PIXELFORMAT_ABGR1555: c_uint = 359862274;
pub static SDL_PIXELFORMAT_BGRA5551: c_uint = 360976386;
pub static SDL_PIXELFORMAT_RGB565: c_uint = 353701890;
pub static SDL_PIXELFORMAT_BGR565: c_uint = 357896194;
pub static SDL_PIXELFORMAT_RGB24: c_uint = 386930691;
pub static SDL_PIXELFORMAT_BGR24: c_uint = 390076419;
pub static SDL_PIXELFORMAT_RGB888: c_uint = 370546692;
pub static SDL_PIXELFORMAT_RGBX8888: c_uint = 371595268;
pub static SDL_PIXELFORMAT_BGR888: c_uint = 374740996;
pub static SDL_PIXELFORMAT_BGRX8888: c_uint = 375789572;
pub static SDL_PIXELFORMAT_ARGB8888: c_uint = 372645892;
pub static SDL_PIXELFORMAT_RGBA8888: c_uint = 373694468;
pub static SDL_PIXELFORMAT_ABGR8888: c_uint = 376840196;
pub static SDL_PIXELFORMAT_BGRA8888: c_uint = 377888772;
pub static SDL_PIXELFORMAT_ARGB2101010: c_uint = 372711428;
pub static SDL_PIXELFORMAT_YV12: c_uint = 842094169;
pub static SDL_PIXELFORMAT_IYUV: c_uint = 1448433993;
pub static SDL_PIXELFORMAT_YUY2: c_uint = 844715353;
pub static SDL_PIXELFORMAT_UYVY: c_uint = 1498831189;
pub static SDL_PIXELFORMAT_YVYU: c_uint = 1431918169;
pub struct Struct_SDL_Color {
    r: Uint8,
    g: Uint8,
    b: Uint8,
    a: Uint8,
}
pub type SDL_Color = Struct_SDL_Color;
pub struct Struct_SDL_Palette {
    ncolors: c_int,
    colors: *mut SDL_Color,
    version: Uint32,
    refcount: c_int,
}
pub type SDL_Palette = Struct_SDL_Palette;
pub struct Struct_SDL_PixelFormat {
    format: Uint32,
    palette: *mut SDL_Palette,
    BitsPerPixel: Uint8,
    BytesPerPixel: Uint8,
    padding: [Uint8, ..2u],
    Rmask: Uint32,
    Gmask: Uint32,
    Bmask: Uint32,
    Amask: Uint32,
    Rloss: Uint8,
    Gloss: Uint8,
    Bloss: Uint8,
    Aloss: Uint8,
    Rshift: Uint8,
    Gshift: Uint8,
    Bshift: Uint8,
    Ashift: Uint8,
    refcount: c_int,
    next: *mut Struct_SDL_PixelFormat,
}
pub type SDL_PixelFormat = Struct_SDL_PixelFormat;
pub struct SDL_Point {
    x: c_int,
    y: c_int,
}
pub struct Struct_SDL_Rect {
    x: c_int,
    y: c_int,
    w: c_int,
    h: c_int,
}
pub type SDL_Rect = Struct_SDL_Rect;
pub type SDL_BlendMode = c_uint;
pub static SDL_BLENDMODE_NONE: c_uint = 0;
pub static SDL_BLENDMODE_BLEND: c_uint = 1;
pub static SDL_BLENDMODE_ADD: c_uint = 2;
pub static SDL_BLENDMODE_MOD: c_uint = 4;
pub struct Struct_SDL_Surface {
    flags: Uint32,
    format: *mut SDL_PixelFormat,
    w: c_int,
    h: c_int,
    pitch: c_int,
    pixels: *mut c_void,
    userdata: *mut c_void,
    locked: c_int,
    lock_data: *mut c_void,
    clip_rect: SDL_Rect,
    map: *mut Struct_SDL_BlitMap,
    refcount: c_int,
}
pub type Struct_SDL_BlitMap = c_void;
pub type SDL_Surface = Struct_SDL_Surface;
pub type SDL_blit =
    extern "C" fn
        (arg1: *mut Struct_SDL_Surface, arg2: *mut SDL_Rect,
         arg3: *mut Struct_SDL_Surface, arg4: *mut SDL_Rect) -> c_int;
pub struct SDL_DisplayMode {
    format: Uint32,
    w: c_int,
    h: c_int,
    refresh_rate: c_int,
    driverdata: *mut c_void,
}
pub type Struct_SDL_Window = c_void;
pub type SDL_Window = Struct_SDL_Window;
pub type SDL_WindowFlags = c_uint;
pub static SDL_WINDOW_FULLSCREEN: c_uint = 1;
pub static SDL_WINDOW_OPENGL: c_uint = 2;
pub static SDL_WINDOW_SHOWN: c_uint = 4;
pub static SDL_WINDOW_HIDDEN: c_uint = 8;
pub static SDL_WINDOW_BORDERLESS: c_uint = 16;
pub static SDL_WINDOW_RESIZABLE: c_uint = 32;
pub static SDL_WINDOW_MINIMIZED: c_uint = 64;
pub static SDL_WINDOW_MAXIMIZED: c_uint = 128;
pub static SDL_WINDOW_INPUT_GRABBED: c_uint = 256;
pub static SDL_WINDOW_INPUT_FOCUS: c_uint = 512;
pub static SDL_WINDOW_MOUSE_FOCUS: c_uint = 1024;
pub static SDL_WINDOW_FULLSCREEN_DESKTOP: c_uint = 4097;
pub static SDL_WINDOW_FOREIGN: c_uint = 2048;
pub type SDL_WindowEventID = c_uint;
pub static SDL_WINDOWEVENT_NONE: c_uint = 0;
pub static SDL_WINDOWEVENT_SHOWN: c_uint = 1;
pub static SDL_WINDOWEVENT_HIDDEN: c_uint = 2;
pub static SDL_WINDOWEVENT_EXPOSED: c_uint = 3;
pub static SDL_WINDOWEVENT_MOVED: c_uint = 4;
pub static SDL_WINDOWEVENT_RESIZED: c_uint = 5;
pub static SDL_WINDOWEVENT_SIZE_CHANGED: c_uint = 6;
pub static SDL_WINDOWEVENT_MINIMIZED: c_uint = 7;
pub static SDL_WINDOWEVENT_MAXIMIZED: c_uint = 8;
pub static SDL_WINDOWEVENT_RESTORED: c_uint = 9;
pub static SDL_WINDOWEVENT_ENTER: c_uint = 10;
pub static SDL_WINDOWEVENT_LEAVE: c_uint = 11;
pub static SDL_WINDOWEVENT_FOCUS_GAINED: c_uint = 12;
pub static SDL_WINDOWEVENT_FOCUS_LOST: c_uint = 13;
pub static SDL_WINDOWEVENT_CLOSE: c_uint = 14;
pub type SDL_GLContext = *mut c_void;
pub type SDL_GLattr = c_uint;
pub static SDL_GL_RED_SIZE: c_uint = 0;
pub static SDL_GL_GREEN_SIZE: c_uint = 1;
pub static SDL_GL_BLUE_SIZE: c_uint = 2;
pub static SDL_GL_ALPHA_SIZE: c_uint = 3;
pub static SDL_GL_BUFFER_SIZE: c_uint = 4;
pub static SDL_GL_DOUBLEBUFFER: c_uint = 5;
pub static SDL_GL_DEPTH_SIZE: c_uint = 6;
pub static SDL_GL_STENCIL_SIZE: c_uint = 7;
pub static SDL_GL_ACCUM_RED_SIZE: c_uint = 8;
pub static SDL_GL_ACCUM_GREEN_SIZE: c_uint = 9;
pub static SDL_GL_ACCUM_BLUE_SIZE: c_uint = 10;
pub static SDL_GL_ACCUM_ALPHA_SIZE: c_uint = 11;
pub static SDL_GL_STEREO: c_uint = 12;
pub static SDL_GL_MULTISAMPLEBUFFERS: c_uint = 13;
pub static SDL_GL_MULTISAMPLESAMPLES: c_uint = 14;
pub static SDL_GL_ACCELERATED_VISUAL: c_uint = 15;
pub static SDL_GL_RETAINED_BACKING: c_uint = 16;
pub static SDL_GL_CONTEXT_MAJOR_VERSION: c_uint = 17;
pub static SDL_GL_CONTEXT_MINOR_VERSION: c_uint = 18;
pub static SDL_GL_CONTEXT_EGL: c_uint = 19;
pub static SDL_GL_CONTEXT_FLAGS: c_uint = 20;
pub static SDL_GL_CONTEXT_PROFILE_MASK: c_uint = 21;
pub static SDL_GL_SHARE_WITH_CURRENT_CONTEXT: c_uint = 22;
pub type SDL_GLprofile = c_uint;
pub static SDL_GL_CONTEXT_PROFILE_CORE: c_uint = 1;
pub static SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: c_uint = 2;
pub static SDL_GL_CONTEXT_PROFILE_ES: c_uint = 4;
pub type SDL_GLcontextFlag = c_uint;
pub static SDL_GL_CONTEXT_DEBUG_FLAG: c_uint = 1;
pub static SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: c_uint = 2;
pub static SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: c_uint = 4;
pub static SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: c_uint = 8;
pub static SDL_RELEASED: Uint8 = 0;
pub static SDL_PRESSED: Uint8 = 1;
pub type SDL_Scancode = c_uint;
pub static SDL_SCANCODE_UNKNOWN: c_uint = 0;
pub static SDL_SCANCODE_A: c_uint = 4;
pub static SDL_SCANCODE_B: c_uint = 5;
pub static SDL_SCANCODE_C: c_uint = 6;
pub static SDL_SCANCODE_D: c_uint = 7;
pub static SDL_SCANCODE_E: c_uint = 8;
pub static SDL_SCANCODE_F: c_uint = 9;
pub static SDL_SCANCODE_G: c_uint = 10;
pub static SDL_SCANCODE_H: c_uint = 11;
pub static SDL_SCANCODE_I: c_uint = 12;
pub static SDL_SCANCODE_J: c_uint = 13;
pub static SDL_SCANCODE_K: c_uint = 14;
pub static SDL_SCANCODE_L: c_uint = 15;
pub static SDL_SCANCODE_M: c_uint = 16;
pub static SDL_SCANCODE_N: c_uint = 17;
pub static SDL_SCANCODE_O: c_uint = 18;
pub static SDL_SCANCODE_P: c_uint = 19;
pub static SDL_SCANCODE_Q: c_uint = 20;
pub static SDL_SCANCODE_R: c_uint = 21;
pub static SDL_SCANCODE_S: c_uint = 22;
pub static SDL_SCANCODE_T: c_uint = 23;
pub static SDL_SCANCODE_U: c_uint = 24;
pub static SDL_SCANCODE_V: c_uint = 25;
pub static SDL_SCANCODE_W: c_uint = 26;
pub static SDL_SCANCODE_X: c_uint = 27;
pub static SDL_SCANCODE_Y: c_uint = 28;
pub static SDL_SCANCODE_Z: c_uint = 29;
pub static SDL_SCANCODE_1: c_uint = 30;
pub static SDL_SCANCODE_2: c_uint = 31;
pub static SDL_SCANCODE_3: c_uint = 32;
pub static SDL_SCANCODE_4: c_uint = 33;
pub static SDL_SCANCODE_5: c_uint = 34;
pub static SDL_SCANCODE_6: c_uint = 35;
pub static SDL_SCANCODE_7: c_uint = 36;
pub static SDL_SCANCODE_8: c_uint = 37;
pub static SDL_SCANCODE_9: c_uint = 38;
pub static SDL_SCANCODE_0: c_uint = 39;
pub static SDL_SCANCODE_RETURN: c_uint = 40;
pub static SDL_SCANCODE_ESCAPE: c_uint = 41;
pub static SDL_SCANCODE_BACKSPACE: c_uint = 42;
pub static SDL_SCANCODE_TAB: c_uint = 43;
pub static SDL_SCANCODE_SPACE: c_uint = 44;
pub static SDL_SCANCODE_MINUS: c_uint = 45;
pub static SDL_SCANCODE_EQUALS: c_uint = 46;
pub static SDL_SCANCODE_LEFTBRACKET: c_uint = 47;
pub static SDL_SCANCODE_RIGHTBRACKET: c_uint = 48;
pub static SDL_SCANCODE_BACKSLASH: c_uint = 49;
pub static SDL_SCANCODE_NONUSHASH: c_uint = 50;
pub static SDL_SCANCODE_SEMICOLON: c_uint = 51;
pub static SDL_SCANCODE_APOSTROPHE: c_uint = 52;
pub static SDL_SCANCODE_GRAVE: c_uint = 53;
pub static SDL_SCANCODE_COMMA: c_uint = 54;
pub static SDL_SCANCODE_PERIOD: c_uint = 55;
pub static SDL_SCANCODE_SLASH: c_uint = 56;
pub static SDL_SCANCODE_CAPSLOCK: c_uint = 57;
pub static SDL_SCANCODE_F1: c_uint = 58;
pub static SDL_SCANCODE_F2: c_uint = 59;
pub static SDL_SCANCODE_F3: c_uint = 60;
pub static SDL_SCANCODE_F4: c_uint = 61;
pub static SDL_SCANCODE_F5: c_uint = 62;
pub static SDL_SCANCODE_F6: c_uint = 63;
pub static SDL_SCANCODE_F7: c_uint = 64;
pub static SDL_SCANCODE_F8: c_uint = 65;
pub static SDL_SCANCODE_F9: c_uint = 66;
pub static SDL_SCANCODE_F10: c_uint = 67;
pub static SDL_SCANCODE_F11: c_uint = 68;
pub static SDL_SCANCODE_F12: c_uint = 69;
pub static SDL_SCANCODE_PRINTSCREEN: c_uint = 70;
pub static SDL_SCANCODE_SCROLLLOCK: c_uint = 71;
pub static SDL_SCANCODE_PAUSE: c_uint = 72;
pub static SDL_SCANCODE_INSERT: c_uint = 73;
pub static SDL_SCANCODE_HOME: c_uint = 74;
pub static SDL_SCANCODE_PAGEUP: c_uint = 75;
pub static SDL_SCANCODE_DELETE: c_uint = 76;
pub static SDL_SCANCODE_END: c_uint = 77;
pub static SDL_SCANCODE_PAGEDOWN: c_uint = 78;
pub static SDL_SCANCODE_RIGHT: c_uint = 79;
pub static SDL_SCANCODE_LEFT: c_uint = 80;
pub static SDL_SCANCODE_DOWN: c_uint = 81;
pub static SDL_SCANCODE_UP: c_uint = 82;
pub static SDL_SCANCODE_NUMLOCKCLEAR: c_uint = 83;
pub static SDL_SCANCODE_KP_DIVIDE: c_uint = 84;
pub static SDL_SCANCODE_KP_MULTIPLY: c_uint = 85;
pub static SDL_SCANCODE_KP_MINUS: c_uint = 86;
pub static SDL_SCANCODE_KP_PLUS: c_uint = 87;
pub static SDL_SCANCODE_KP_ENTER: c_uint = 88;
pub static SDL_SCANCODE_KP_1: c_uint = 89;
pub static SDL_SCANCODE_KP_2: c_uint = 90;
pub static SDL_SCANCODE_KP_3: c_uint = 91;
pub static SDL_SCANCODE_KP_4: c_uint = 92;
pub static SDL_SCANCODE_KP_5: c_uint = 93;
pub static SDL_SCANCODE_KP_6: c_uint = 94;
pub static SDL_SCANCODE_KP_7: c_uint = 95;
pub static SDL_SCANCODE_KP_8: c_uint = 96;
pub static SDL_SCANCODE_KP_9: c_uint = 97;
pub static SDL_SCANCODE_KP_0: c_uint = 98;
pub static SDL_SCANCODE_KP_PERIOD: c_uint = 99;
pub static SDL_SCANCODE_NONUSBACKSLASH: c_uint = 100;
pub static SDL_SCANCODE_APPLICATION: c_uint = 101;
pub static SDL_SCANCODE_POWER: c_uint = 102;
pub static SDL_SCANCODE_KP_EQUALS: c_uint = 103;
pub static SDL_SCANCODE_F13: c_uint = 104;
pub static SDL_SCANCODE_F14: c_uint = 105;
pub static SDL_SCANCODE_F15: c_uint = 106;
pub static SDL_SCANCODE_F16: c_uint = 107;
pub static SDL_SCANCODE_F17: c_uint = 108;
pub static SDL_SCANCODE_F18: c_uint = 109;
pub static SDL_SCANCODE_F19: c_uint = 110;
pub static SDL_SCANCODE_F20: c_uint = 111;
pub static SDL_SCANCODE_F21: c_uint = 112;
pub static SDL_SCANCODE_F22: c_uint = 113;
pub static SDL_SCANCODE_F23: c_uint = 114;
pub static SDL_SCANCODE_F24: c_uint = 115;
pub static SDL_SCANCODE_EXECUTE: c_uint = 116;
pub static SDL_SCANCODE_HELP: c_uint = 117;
pub static SDL_SCANCODE_MENU: c_uint = 118;
pub static SDL_SCANCODE_SELECT: c_uint = 119;
pub static SDL_SCANCODE_STOP: c_uint = 120;
pub static SDL_SCANCODE_AGAIN: c_uint = 121;
pub static SDL_SCANCODE_UNDO: c_uint = 122;
pub static SDL_SCANCODE_CUT: c_uint = 123;
pub static SDL_SCANCODE_COPY: c_uint = 124;
pub static SDL_SCANCODE_PASTE: c_uint = 125;
pub static SDL_SCANCODE_FIND: c_uint = 126;
pub static SDL_SCANCODE_MUTE: c_uint = 127;
pub static SDL_SCANCODE_VOLUMEUP: c_uint = 128;
pub static SDL_SCANCODE_VOLUMEDOWN: c_uint = 129;
pub static SDL_SCANCODE_KP_COMMA: c_uint = 133;
pub static SDL_SCANCODE_KP_EQUALSAS400: c_uint = 134;
pub static SDL_SCANCODE_INTERNATIONAL1: c_uint = 135;
pub static SDL_SCANCODE_INTERNATIONAL2: c_uint = 136;
pub static SDL_SCANCODE_INTERNATIONAL3: c_uint = 137;
pub static SDL_SCANCODE_INTERNATIONAL4: c_uint = 138;
pub static SDL_SCANCODE_INTERNATIONAL5: c_uint = 139;
pub static SDL_SCANCODE_INTERNATIONAL6: c_uint = 140;
pub static SDL_SCANCODE_INTERNATIONAL7: c_uint = 141;
pub static SDL_SCANCODE_INTERNATIONAL8: c_uint = 142;
pub static SDL_SCANCODE_INTERNATIONAL9: c_uint = 143;
pub static SDL_SCANCODE_LANG1: c_uint = 144;
pub static SDL_SCANCODE_LANG2: c_uint = 145;
pub static SDL_SCANCODE_LANG3: c_uint = 146;
pub static SDL_SCANCODE_LANG4: c_uint = 147;
pub static SDL_SCANCODE_LANG5: c_uint = 148;
pub static SDL_SCANCODE_LANG6: c_uint = 149;
pub static SDL_SCANCODE_LANG7: c_uint = 150;
pub static SDL_SCANCODE_LANG8: c_uint = 151;
pub static SDL_SCANCODE_LANG9: c_uint = 152;
pub static SDL_SCANCODE_ALTERASE: c_uint = 153;
pub static SDL_SCANCODE_SYSREQ: c_uint = 154;
pub static SDL_SCANCODE_CANCEL: c_uint = 155;
pub static SDL_SCANCODE_CLEAR: c_uint = 156;
pub static SDL_SCANCODE_PRIOR: c_uint = 157;
pub static SDL_SCANCODE_RETURN2: c_uint = 158;
pub static SDL_SCANCODE_SEPARATOR: c_uint = 159;
pub static SDL_SCANCODE_OUT: c_uint = 160;
pub static SDL_SCANCODE_OPER: c_uint = 161;
pub static SDL_SCANCODE_CLEARAGAIN: c_uint = 162;
pub static SDL_SCANCODE_CRSEL: c_uint = 163;
pub static SDL_SCANCODE_EXSEL: c_uint = 164;
pub static SDL_SCANCODE_KP_00: c_uint = 176;
pub static SDL_SCANCODE_KP_000: c_uint = 177;
pub static SDL_SCANCODE_THOUSANDSSEPARATOR: c_uint = 178;
pub static SDL_SCANCODE_DECIMALSEPARATOR: c_uint = 179;
pub static SDL_SCANCODE_CURRENCYUNIT: c_uint = 180;
pub static SDL_SCANCODE_CURRENCYSUBUNIT: c_uint = 181;
pub static SDL_SCANCODE_KP_LEFTPAREN: c_uint = 182;
pub static SDL_SCANCODE_KP_RIGHTPAREN: c_uint = 183;
pub static SDL_SCANCODE_KP_LEFTBRACE: c_uint = 184;
pub static SDL_SCANCODE_KP_RIGHTBRACE: c_uint = 185;
pub static SDL_SCANCODE_KP_TAB: c_uint = 186;
pub static SDL_SCANCODE_KP_BACKSPACE: c_uint = 187;
pub static SDL_SCANCODE_KP_A: c_uint = 188;
pub static SDL_SCANCODE_KP_B: c_uint = 189;
pub static SDL_SCANCODE_KP_C: c_uint = 190;
pub static SDL_SCANCODE_KP_D: c_uint = 191;
pub static SDL_SCANCODE_KP_E: c_uint = 192;
pub static SDL_SCANCODE_KP_F: c_uint = 193;
pub static SDL_SCANCODE_KP_XOR: c_uint = 194;
pub static SDL_SCANCODE_KP_POWER: c_uint = 195;
pub static SDL_SCANCODE_KP_PERCENT: c_uint = 196;
pub static SDL_SCANCODE_KP_LESS: c_uint = 197;
pub static SDL_SCANCODE_KP_GREATER: c_uint = 198;
pub static SDL_SCANCODE_KP_AMPERSAND: c_uint = 199;
pub static SDL_SCANCODE_KP_DBLAMPERSAND: c_uint = 200;
pub static SDL_SCANCODE_KP_VERTICALBAR: c_uint = 201;
pub static SDL_SCANCODE_KP_DBLVERTICALBAR: c_uint = 202;
pub static SDL_SCANCODE_KP_COLON: c_uint = 203;
pub static SDL_SCANCODE_KP_HASH: c_uint = 204;
pub static SDL_SCANCODE_KP_SPACE: c_uint = 205;
pub static SDL_SCANCODE_KP_AT: c_uint = 206;
pub static SDL_SCANCODE_KP_EXCLAM: c_uint = 207;
pub static SDL_SCANCODE_KP_MEMSTORE: c_uint = 208;
pub static SDL_SCANCODE_KP_MEMRECALL: c_uint = 209;
pub static SDL_SCANCODE_KP_MEMCLEAR: c_uint = 210;
pub static SDL_SCANCODE_KP_MEMADD: c_uint = 211;
pub static SDL_SCANCODE_KP_MEMSUBTRACT: c_uint = 212;
pub static SDL_SCANCODE_KP_MEMMULTIPLY: c_uint = 213;
pub static SDL_SCANCODE_KP_MEMDIVIDE: c_uint = 214;
pub static SDL_SCANCODE_KP_PLUSMINUS: c_uint = 215;
pub static SDL_SCANCODE_KP_CLEAR: c_uint = 216;
pub static SDL_SCANCODE_KP_CLEARENTRY: c_uint = 217;
pub static SDL_SCANCODE_KP_BINARY: c_uint = 218;
pub static SDL_SCANCODE_KP_OCTAL: c_uint = 219;
pub static SDL_SCANCODE_KP_DECIMAL: c_uint = 220;
pub static SDL_SCANCODE_KP_HEXADECIMAL: c_uint = 221;
pub static SDL_SCANCODE_LCTRL: c_uint = 224;
pub static SDL_SCANCODE_LSHIFT: c_uint = 225;
pub static SDL_SCANCODE_LALT: c_uint = 226;
pub static SDL_SCANCODE_LGUI: c_uint = 227;
pub static SDL_SCANCODE_RCTRL: c_uint = 228;
pub static SDL_SCANCODE_RSHIFT: c_uint = 229;
pub static SDL_SCANCODE_RALT: c_uint = 230;
pub static SDL_SCANCODE_RGUI: c_uint = 231;
pub static SDL_SCANCODE_MODE: c_uint = 257;
pub static SDL_SCANCODE_AUDIONEXT: c_uint = 258;
pub static SDL_SCANCODE_AUDIOPREV: c_uint = 259;
pub static SDL_SCANCODE_AUDIOSTOP: c_uint = 260;
pub static SDL_SCANCODE_AUDIOPLAY: c_uint = 261;
pub static SDL_SCANCODE_AUDIOMUTE: c_uint = 262;
pub static SDL_SCANCODE_MEDIASELECT: c_uint = 263;
pub static SDL_SCANCODE_WWW: c_uint = 264;
pub static SDL_SCANCODE_MAIL: c_uint = 265;
pub static SDL_SCANCODE_CALCULATOR: c_uint = 266;
pub static SDL_SCANCODE_COMPUTER: c_uint = 267;
pub static SDL_SCANCODE_AC_SEARCH: c_uint = 268;
pub static SDL_SCANCODE_AC_HOME: c_uint = 269;
pub static SDL_SCANCODE_AC_BACK: c_uint = 270;
pub static SDL_SCANCODE_AC_FORWARD: c_uint = 271;
pub static SDL_SCANCODE_AC_STOP: c_uint = 272;
pub static SDL_SCANCODE_AC_REFRESH: c_uint = 273;
pub static SDL_SCANCODE_AC_BOOKMARKS: c_uint = 274;
pub static SDL_SCANCODE_BRIGHTNESSDOWN: c_uint = 275;
pub static SDL_SCANCODE_BRIGHTNESSUP: c_uint = 276;
pub static SDL_SCANCODE_DISPLAYSWITCH: c_uint = 277;
pub static SDL_SCANCODE_KBDILLUMTOGGLE: c_uint = 278;
pub static SDL_SCANCODE_KBDILLUMDOWN: c_uint = 279;
pub static SDL_SCANCODE_KBDILLUMUP: c_uint = 280;
pub static SDL_SCANCODE_EJECT: c_uint = 281;
pub static SDL_SCANCODE_SLEEP: c_uint = 282;
pub static SDL_SCANCODE_APP1: c_uint = 283;
pub static SDL_SCANCODE_APP2: c_uint = 284;
pub static SDL_NUM_SCANCODES: c_uint = 512;
pub type SDL_Keycode = Sint32;
pub type Enum_Unnamed11 = c_uint;
pub static SDLK_UNKNOWN: c_uint = 0;
pub static SDLK_RETURN: c_uint = 13;
pub static SDLK_ESCAPE: c_uint = 27;
pub static SDLK_BACKSPACE: c_uint = 8;
pub static SDLK_TAB: c_uint = 9;
pub static SDLK_SPACE: c_uint = 32;
pub static SDLK_EXCLAIM: c_uint = 33;
pub static SDLK_QUOTEDBL: c_uint = 34;
pub static SDLK_HASH: c_uint = 35;
pub static SDLK_PERCENT: c_uint = 37;
pub static SDLK_DOLLAR: c_uint = 36;
pub static SDLK_AMPERSAND: c_uint = 38;
pub static SDLK_QUOTE: c_uint = 39;
pub static SDLK_LEFTPAREN: c_uint = 40;
pub static SDLK_RIGHTPAREN: c_uint = 41;
pub static SDLK_ASTERISK: c_uint = 42;
pub static SDLK_PLUS: c_uint = 43;
pub static SDLK_COMMA: c_uint = 44;
pub static SDLK_MINUS: c_uint = 45;
pub static SDLK_PERIOD: c_uint = 46;
pub static SDLK_SLASH: c_uint = 47;
pub static SDLK_0: c_uint = 48;
pub static SDLK_1: c_uint = 49;
pub static SDLK_2: c_uint = 50;
pub static SDLK_3: c_uint = 51;
pub static SDLK_4: c_uint = 52;
pub static SDLK_5: c_uint = 53;
pub static SDLK_6: c_uint = 54;
pub static SDLK_7: c_uint = 55;
pub static SDLK_8: c_uint = 56;
pub static SDLK_9: c_uint = 57;
pub static SDLK_COLON: c_uint = 58;
pub static SDLK_SEMICOLON: c_uint = 59;
pub static SDLK_LESS: c_uint = 60;
pub static SDLK_EQUALS: c_uint = 61;
pub static SDLK_GREATER: c_uint = 62;
pub static SDLK_QUESTION: c_uint = 63;
pub static SDLK_AT: c_uint = 64;
pub static SDLK_LEFTBRACKET: c_uint = 91;
pub static SDLK_BACKSLASH: c_uint = 92;
pub static SDLK_RIGHTBRACKET: c_uint = 93;
pub static SDLK_CARET: c_uint = 94;
pub static SDLK_UNDERSCORE: c_uint = 95;
pub static SDLK_BACKQUOTE: c_uint = 96;
pub static SDLK_a: c_uint = 97;
pub static SDLK_b: c_uint = 98;
pub static SDLK_c: c_uint = 99;
pub static SDLK_d: c_uint = 100;
pub static SDLK_e: c_uint = 101;
pub static SDLK_f: c_uint = 102;
pub static SDLK_g: c_uint = 103;
pub static SDLK_h: c_uint = 104;
pub static SDLK_i: c_uint = 105;
pub static SDLK_j: c_uint = 106;
pub static SDLK_k: c_uint = 107;
pub static SDLK_l: c_uint = 108;
pub static SDLK_m: c_uint = 109;
pub static SDLK_n: c_uint = 110;
pub static SDLK_o: c_uint = 111;
pub static SDLK_p: c_uint = 112;
pub static SDLK_q: c_uint = 113;
pub static SDLK_r: c_uint = 114;
pub static SDLK_s: c_uint = 115;
pub static SDLK_t: c_uint = 116;
pub static SDLK_u: c_uint = 117;
pub static SDLK_v: c_uint = 118;
pub static SDLK_w: c_uint = 119;
pub static SDLK_x: c_uint = 120;
pub static SDLK_y: c_uint = 121;
pub static SDLK_z: c_uint = 122;
pub static SDLK_CAPSLOCK: c_uint = 1073741881;
pub static SDLK_F1: c_uint = 1073741882;
pub static SDLK_F2: c_uint = 1073741883;
pub static SDLK_F3: c_uint = 1073741884;
pub static SDLK_F4: c_uint = 1073741885;
pub static SDLK_F5: c_uint = 1073741886;
pub static SDLK_F6: c_uint = 1073741887;
pub static SDLK_F7: c_uint = 1073741888;
pub static SDLK_F8: c_uint = 1073741889;
pub static SDLK_F9: c_uint = 1073741890;
pub static SDLK_F10: c_uint = 1073741891;
pub static SDLK_F11: c_uint = 1073741892;
pub static SDLK_F12: c_uint = 1073741893;
pub static SDLK_PRINTSCREEN: c_uint = 1073741894;
pub static SDLK_SCROLLLOCK: c_uint = 1073741895;
pub static SDLK_PAUSE: c_uint = 1073741896;
pub static SDLK_INSERT: c_uint = 1073741897;
pub static SDLK_HOME: c_uint = 1073741898;
pub static SDLK_PAGEUP: c_uint = 1073741899;
pub static SDLK_DELETE: c_uint = 127;
pub static SDLK_END: c_uint = 1073741901;
pub static SDLK_PAGEDOWN: c_uint = 1073741902;
pub static SDLK_RIGHT: c_uint = 1073741903;
pub static SDLK_LEFT: c_uint = 1073741904;
pub static SDLK_DOWN: c_uint = 1073741905;
pub static SDLK_UP: c_uint = 1073741906;
pub static SDLK_NUMLOCKCLEAR: c_uint = 1073741907;
pub static SDLK_KP_DIVIDE: c_uint = 1073741908;
pub static SDLK_KP_MULTIPLY: c_uint = 1073741909;
pub static SDLK_KP_MINUS: c_uint = 1073741910;
pub static SDLK_KP_PLUS: c_uint = 1073741911;
pub static SDLK_KP_ENTER: c_uint = 1073741912;
pub static SDLK_KP_1: c_uint = 1073741913;
pub static SDLK_KP_2: c_uint = 1073741914;
pub static SDLK_KP_3: c_uint = 1073741915;
pub static SDLK_KP_4: c_uint = 1073741916;
pub static SDLK_KP_5: c_uint = 1073741917;
pub static SDLK_KP_6: c_uint = 1073741918;
pub static SDLK_KP_7: c_uint = 1073741919;
pub static SDLK_KP_8: c_uint = 1073741920;
pub static SDLK_KP_9: c_uint = 1073741921;
pub static SDLK_KP_0: c_uint = 1073741922;
pub static SDLK_KP_PERIOD: c_uint = 1073741923;
pub static SDLK_APPLICATION: c_uint = 1073741925;
pub static SDLK_POWER: c_uint = 1073741926;
pub static SDLK_KP_EQUALS: c_uint = 1073741927;
pub static SDLK_F13: c_uint = 1073741928;
pub static SDLK_F14: c_uint = 1073741929;
pub static SDLK_F15: c_uint = 1073741930;
pub static SDLK_F16: c_uint = 1073741931;
pub static SDLK_F17: c_uint = 1073741932;
pub static SDLK_F18: c_uint = 1073741933;
pub static SDLK_F19: c_uint = 1073741934;
pub static SDLK_F20: c_uint = 1073741935;
pub static SDLK_F21: c_uint = 1073741936;
pub static SDLK_F22: c_uint = 1073741937;
pub static SDLK_F23: c_uint = 1073741938;
pub static SDLK_F24: c_uint = 1073741939;
pub static SDLK_EXECUTE: c_uint = 1073741940;
pub static SDLK_HELP: c_uint = 1073741941;
pub static SDLK_MENU: c_uint = 1073741942;
pub static SDLK_SELECT: c_uint = 1073741943;
pub static SDLK_STOP: c_uint = 1073741944;
pub static SDLK_AGAIN: c_uint = 1073741945;
pub static SDLK_UNDO: c_uint = 1073741946;
pub static SDLK_CUT: c_uint = 1073741947;
pub static SDLK_COPY: c_uint = 1073741948;
pub static SDLK_PASTE: c_uint = 1073741949;
pub static SDLK_FIND: c_uint = 1073741950;
pub static SDLK_MUTE: c_uint = 1073741951;
pub static SDLK_VOLUMEUP: c_uint = 1073741952;
pub static SDLK_VOLUMEDOWN: c_uint = 1073741953;
pub static SDLK_KP_COMMA: c_uint = 1073741957;
pub static SDLK_KP_EQUALSAS400: c_uint = 1073741958;
pub static SDLK_ALTERASE: c_uint = 1073741977;
pub static SDLK_SYSREQ: c_uint = 1073741978;
pub static SDLK_CANCEL: c_uint = 1073741979;
pub static SDLK_CLEAR: c_uint = 1073741980;
pub static SDLK_PRIOR: c_uint = 1073741981;
pub static SDLK_RETURN2: c_uint = 1073741982;
pub static SDLK_SEPARATOR: c_uint = 1073741983;
pub static SDLK_OUT: c_uint = 1073741984;
pub static SDLK_OPER: c_uint = 1073741985;
pub static SDLK_CLEARAGAIN: c_uint = 1073741986;
pub static SDLK_CRSEL: c_uint = 1073741987;
pub static SDLK_EXSEL: c_uint = 1073741988;
pub static SDLK_KP_00: c_uint = 1073742000;
pub static SDLK_KP_000: c_uint = 1073742001;
pub static SDLK_THOUSANDSSEPARATOR: c_uint = 1073742002;
pub static SDLK_DECIMALSEPARATOR: c_uint = 1073742003;
pub static SDLK_CURRENCYUNIT: c_uint = 1073742004;
pub static SDLK_CURRENCYSUBUNIT: c_uint = 1073742005;
pub static SDLK_KP_LEFTPAREN: c_uint = 1073742006;
pub static SDLK_KP_RIGHTPAREN: c_uint = 1073742007;
pub static SDLK_KP_LEFTBRACE: c_uint = 1073742008;
pub static SDLK_KP_RIGHTBRACE: c_uint = 1073742009;
pub static SDLK_KP_TAB: c_uint = 1073742010;
pub static SDLK_KP_BACKSPACE: c_uint = 1073742011;
pub static SDLK_KP_A: c_uint = 1073742012;
pub static SDLK_KP_B: c_uint = 1073742013;
pub static SDLK_KP_C: c_uint = 1073742014;
pub static SDLK_KP_D: c_uint = 1073742015;
pub static SDLK_KP_E: c_uint = 1073742016;
pub static SDLK_KP_F: c_uint = 1073742017;
pub static SDLK_KP_XOR: c_uint = 1073742018;
pub static SDLK_KP_POWER: c_uint = 1073742019;
pub static SDLK_KP_PERCENT: c_uint = 1073742020;
pub static SDLK_KP_LESS: c_uint = 1073742021;
pub static SDLK_KP_GREATER: c_uint = 1073742022;
pub static SDLK_KP_AMPERSAND: c_uint = 1073742023;
pub static SDLK_KP_DBLAMPERSAND: c_uint = 1073742024;
pub static SDLK_KP_VERTICALBAR: c_uint = 1073742025;
pub static SDLK_KP_DBLVERTICALBAR: c_uint = 1073742026;
pub static SDLK_KP_COLON: c_uint = 1073742027;
pub static SDLK_KP_HASH: c_uint = 1073742028;
pub static SDLK_KP_SPACE: c_uint = 1073742029;
pub static SDLK_KP_AT: c_uint = 1073742030;
pub static SDLK_KP_EXCLAM: c_uint = 1073742031;
pub static SDLK_KP_MEMSTORE: c_uint = 1073742032;
pub static SDLK_KP_MEMRECALL: c_uint = 1073742033;
pub static SDLK_KP_MEMCLEAR: c_uint = 1073742034;
pub static SDLK_KP_MEMADD: c_uint = 1073742035;
pub static SDLK_KP_MEMSUBTRACT: c_uint = 1073742036;
pub static SDLK_KP_MEMMULTIPLY: c_uint = 1073742037;
pub static SDLK_KP_MEMDIVIDE: c_uint = 1073742038;
pub static SDLK_KP_PLUSMINUS: c_uint = 1073742039;
pub static SDLK_KP_CLEAR: c_uint = 1073742040;
pub static SDLK_KP_CLEARENTRY: c_uint = 1073742041;
pub static SDLK_KP_BINARY: c_uint = 1073742042;
pub static SDLK_KP_OCTAL: c_uint = 1073742043;
pub static SDLK_KP_DECIMAL: c_uint = 1073742044;
pub static SDLK_KP_HEXADECIMAL: c_uint = 1073742045;
pub static SDLK_LCTRL: c_uint = 1073742048;
pub static SDLK_LSHIFT: c_uint = 1073742049;
pub static SDLK_LALT: c_uint = 1073742050;
pub static SDLK_LGUI: c_uint = 1073742051;
pub static SDLK_RCTRL: c_uint = 1073742052;
pub static SDLK_RSHIFT: c_uint = 1073742053;
pub static SDLK_RALT: c_uint = 1073742054;
pub static SDLK_RGUI: c_uint = 1073742055;
pub static SDLK_MODE: c_uint = 1073742081;
pub static SDLK_AUDIONEXT: c_uint = 1073742082;
pub static SDLK_AUDIOPREV: c_uint = 1073742083;
pub static SDLK_AUDIOSTOP: c_uint = 1073742084;
pub static SDLK_AUDIOPLAY: c_uint = 1073742085;
pub static SDLK_AUDIOMUTE: c_uint = 1073742086;
pub static SDLK_MEDIASELECT: c_uint = 1073742087;
pub static SDLK_WWW: c_uint = 1073742088;
pub static SDLK_MAIL: c_uint = 1073742089;
pub static SDLK_CALCULATOR: c_uint = 1073742090;
pub static SDLK_COMPUTER: c_uint = 1073742091;
pub static SDLK_AC_SEARCH: c_uint = 1073742092;
pub static SDLK_AC_HOME: c_uint = 1073742093;
pub static SDLK_AC_BACK: c_uint = 1073742094;
pub static SDLK_AC_FORWARD: c_uint = 1073742095;
pub static SDLK_AC_STOP: c_uint = 1073742096;
pub static SDLK_AC_REFRESH: c_uint = 1073742097;
pub static SDLK_AC_BOOKMARKS: c_uint = 1073742098;
pub static SDLK_BRIGHTNESSDOWN: c_uint = 1073742099;
pub static SDLK_BRIGHTNESSUP: c_uint = 1073742100;
pub static SDLK_DISPLAYSWITCH: c_uint = 1073742101;
pub static SDLK_KBDILLUMTOGGLE: c_uint = 1073742102;
pub static SDLK_KBDILLUMDOWN: c_uint = 1073742103;
pub static SDLK_KBDILLUMUP: c_uint = 1073742104;
pub static SDLK_EJECT: c_uint = 1073742105;
pub static SDLK_SLEEP: c_uint = 1073742106;
pub type SDL_Keymod = c_uint;
pub static KMOD_NONE: c_uint = 0;
pub static KMOD_LSHIFT: c_uint = 1;
pub static KMOD_RSHIFT: c_uint = 2;
pub static KMOD_LCTRL: c_uint = 64;
pub static KMOD_RCTRL: c_uint = 128;
pub static KMOD_LALT: c_uint = 256;
pub static KMOD_RALT: c_uint = 512;
pub static KMOD_LGUI: c_uint = 1024;
pub static KMOD_RGUI: c_uint = 2048;
pub static KMOD_NUM: c_uint = 4096;
pub static KMOD_CAPS: c_uint = 8192;
pub static KMOD_MODE: c_uint = 16384;
pub static KMOD_RESERVED: c_uint = 32768;
pub struct Struct_SDL_Keysym {
    scancode: SDL_Scancode,
    sym: SDL_Keycode,
    _mod: Uint16,
    unused: Uint32,
}
pub type SDL_Keysym = Struct_SDL_Keysym;
pub type Struct_SDL_Cursor = c_void;
pub type SDL_Cursor = Struct_SDL_Cursor;
pub type SDL_SystemCursor = c_uint;
pub static SDL_SYSTEM_CURSOR_ARROW: c_uint = 0;
pub static SDL_SYSTEM_CURSOR_IBEAM: c_uint = 1;
pub static SDL_SYSTEM_CURSOR_WAIT: c_uint = 2;
pub static SDL_SYSTEM_CURSOR_CROSSHAIR: c_uint = 3;
pub static SDL_SYSTEM_CURSOR_WAITARROW: c_uint = 4;
pub static SDL_SYSTEM_CURSOR_SIZENWSE: c_uint = 5;
pub static SDL_SYSTEM_CURSOR_SIZENESW: c_uint = 6;
pub static SDL_SYSTEM_CURSOR_SIZEWE: c_uint = 7;
pub static SDL_SYSTEM_CURSOR_SIZENS: c_uint = 8;
pub static SDL_SYSTEM_CURSOR_SIZEALL: c_uint = 9;
pub static SDL_SYSTEM_CURSOR_NO: c_uint = 10;
pub static SDL_SYSTEM_CURSOR_HAND: c_uint = 11;
pub static SDL_NUM_SYSTEM_CURSORS: c_uint = 12;
pub type Struct__SDL_Joystick = c_void;
pub type SDL_Joystick = Struct__SDL_Joystick;
pub struct SDL_JoystickGUID {
    data: [Uint8, ..16u],
}
pub type SDL_JoystickID = Sint32;
pub type Struct__SDL_GameController = c_void;
pub type SDL_GameController = Struct__SDL_GameController;
pub type SDL_GameControllerBindType = c_uint;
pub static SDL_CONTROLLER_BINDTYPE_NONE: c_uint = 0;
pub static SDL_CONTROLLER_BINDTYPE_BUTTON: c_uint = 1;
pub static SDL_CONTROLLER_BINDTYPE_AXIS: c_uint = 2;
pub static SDL_CONTROLLER_BINDTYPE_HAT: c_uint = 3;
pub struct Struct_SDL_GameControllerButtonBind {
    bindType: SDL_GameControllerBindType,
    value: Union_Unnamed12,
}
pub struct Union_Unnamed12 {
    data: [c_uchar, ..8u],
}
impl Union_Unnamed12 {
    pub fn button(&mut self) -> *mut c_int {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn axis(&mut self) -> *mut c_int {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn hat(&mut self) -> *mut Struct_Unnamed13 {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub struct Struct_Unnamed13 {
    hat: c_int,
    hat_mask: c_int,
}
pub type SDL_GameControllerButtonBind = Struct_SDL_GameControllerButtonBind;
pub type SDL_GameControllerAxis = c_int;
pub static SDL_CONTROLLER_AXIS_INVALID: c_int = -1;
pub static SDL_CONTROLLER_AXIS_LEFTX: c_int = 0;
pub static SDL_CONTROLLER_AXIS_LEFTY: c_int = 1;
pub static SDL_CONTROLLER_AXIS_RIGHTX: c_int = 2;
pub static SDL_CONTROLLER_AXIS_RIGHTY: c_int = 3;
pub static SDL_CONTROLLER_AXIS_TRIGGERLEFT: c_int = 4;
pub static SDL_CONTROLLER_AXIS_TRIGGERRIGHT: c_int = 5;
pub static SDL_CONTROLLER_AXIS_MAX: c_int = 6;
pub type SDL_GameControllerButton = c_int;
pub static SDL_CONTROLLER_BUTTON_INVALID: c_int = -1;
pub static SDL_CONTROLLER_BUTTON_A: c_int = 0;
pub static SDL_CONTROLLER_BUTTON_B: c_int = 1;
pub static SDL_CONTROLLER_BUTTON_X: c_int = 2;
pub static SDL_CONTROLLER_BUTTON_Y: c_int = 3;
pub static SDL_CONTROLLER_BUTTON_BACK: c_int = 4;
pub static SDL_CONTROLLER_BUTTON_GUIDE: c_int = 5;
pub static SDL_CONTROLLER_BUTTON_START: c_int = 6;
pub static SDL_CONTROLLER_BUTTON_LEFTSTICK: c_int = 7;
pub static SDL_CONTROLLER_BUTTON_RIGHTSTICK: c_int = 8;
pub static SDL_CONTROLLER_BUTTON_LEFTSHOULDER: c_int = 9;
pub static SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: c_int = 10;
pub static SDL_CONTROLLER_BUTTON_DPAD_UP: c_int = 11;
pub static SDL_CONTROLLER_BUTTON_DPAD_DOWN: c_int = 12;
pub static SDL_CONTROLLER_BUTTON_DPAD_LEFT: c_int = 13;
pub static SDL_CONTROLLER_BUTTON_DPAD_RIGHT: c_int = 14;
pub static SDL_CONTROLLER_BUTTON_MAX: c_int = 15;
pub type SDL_TouchID = Sint64;
pub type SDL_FingerID = Sint64;
pub struct Struct_SDL_Finger {
    id: SDL_FingerID,
    x: c_float,
    y: c_float,
    pressure: c_float,
}
pub type SDL_Finger = Struct_SDL_Finger;
pub type SDL_GestureID = Sint64;
pub type SDL_EventType = c_uint;
pub static SDL_FIRSTEVENT: c_uint = 0;
pub static SDL_QUIT: c_uint = 256;
pub static SDL_APP_TERMINATING: c_uint = 257;
pub static SDL_APP_LOWMEMORY: c_uint = 258;
pub static SDL_APP_WILLENTERBACKGROUND: c_uint = 259;
pub static SDL_APP_DIDENTERBACKGROUND: c_uint = 260;
pub static SDL_APP_WILLENTERFOREGROUND: c_uint = 261;
pub static SDL_APP_DIDENTERFOREGROUND: c_uint = 262;
pub static SDL_WINDOWEVENT: c_uint = 512;
pub static SDL_SYSWMEVENT: c_uint = 513;
pub static SDL_KEYDOWN: c_uint = 768;
pub static SDL_KEYUP: c_uint = 769;
pub static SDL_TEXTEDITING: c_uint = 770;
pub static SDL_TEXTINPUT: c_uint = 771;
pub static SDL_MOUSEMOTION: c_uint = 1024;
pub static SDL_MOUSEBUTTONDOWN: c_uint = 1025;
pub static SDL_MOUSEBUTTONUP: c_uint = 1026;
pub static SDL_MOUSEWHEEL: c_uint = 1027;
pub static SDL_JOYAXISMOTION: c_uint = 1536;
pub static SDL_JOYBALLMOTION: c_uint = 1537;
pub static SDL_JOYHATMOTION: c_uint = 1538;
pub static SDL_JOYBUTTONDOWN: c_uint = 1539;
pub static SDL_JOYBUTTONUP: c_uint = 1540;
pub static SDL_JOYDEVICEADDED: c_uint = 1541;
pub static SDL_JOYDEVICEREMOVED: c_uint = 1542;
pub static SDL_CONTROLLERAXISMOTION: c_uint = 1616;
pub static SDL_CONTROLLERBUTTONDOWN: c_uint = 1617;
pub static SDL_CONTROLLERBUTTONUP: c_uint = 1618;
pub static SDL_CONTROLLERDEVICEADDED: c_uint = 1619;
pub static SDL_CONTROLLERDEVICEREMOVED: c_uint = 1620;
pub static SDL_CONTROLLERDEVICEREMAPPED: c_uint = 1621;
pub static SDL_FINGERDOWN: c_uint = 1792;
pub static SDL_FINGERUP: c_uint = 1793;
pub static SDL_FINGERMOTION: c_uint = 1794;
pub static SDL_DOLLARGESTURE: c_uint = 2048;
pub static SDL_DOLLARRECORD: c_uint = 2049;
pub static SDL_MULTIGESTURE: c_uint = 2050;
pub static SDL_CLIPBOARDUPDATE: c_uint = 2304;
pub static SDL_DROPFILE: c_uint = 4096;
pub static SDL_USEREVENT: c_uint = 32768;
pub static SDL_LASTEVENT: c_uint = 65535;
pub struct Struct_SDL_CommonEvent {
    _type: Uint32,
    timestamp: Uint32,
}
pub type SDL_CommonEvent = Struct_SDL_CommonEvent;
pub struct Struct_SDL_WindowEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    event: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    data1: Sint32,
    data2: Sint32,
}
pub type SDL_WindowEvent = Struct_SDL_WindowEvent;
pub struct Struct_SDL_KeyboardEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    state: Uint8,
    repeat: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    keysym: SDL_Keysym,
}
pub type SDL_KeyboardEvent = Struct_SDL_KeyboardEvent;
pub struct Struct_SDL_TextEditingEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    text: [c_schar, ..32u],
    start: Sint32,
    length: Sint32,
}
pub type SDL_TextEditingEvent = Struct_SDL_TextEditingEvent;
pub struct Struct_SDL_TextInputEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    text: [c_schar, ..32u],
}
pub type SDL_TextInputEvent = Struct_SDL_TextInputEvent;
pub struct Struct_SDL_MouseMotionEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    which: Uint32,
    state: Uint32,
    x: Sint32,
    y: Sint32,
    xrel: Sint32,
    yrel: Sint32,
}
pub type SDL_MouseMotionEvent = Struct_SDL_MouseMotionEvent;
pub struct Struct_SDL_MouseButtonEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    which: Uint32,
    button: Uint8,
    state: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    x: Sint32,
    y: Sint32,
}
pub type SDL_MouseButtonEvent = Struct_SDL_MouseButtonEvent;
pub struct Struct_SDL_MouseWheelEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    which: Uint32,
    x: Sint32,
    y: Sint32,
}
pub type SDL_MouseWheelEvent = Struct_SDL_MouseWheelEvent;
pub struct Struct_SDL_JoyAxisEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    axis: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    value: Sint16,
    padding4: Uint16,
}
pub type SDL_JoyAxisEvent = Struct_SDL_JoyAxisEvent;
pub struct Struct_SDL_JoyBallEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    ball: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    xrel: Sint16,
    yrel: Sint16,
}
pub type SDL_JoyBallEvent = Struct_SDL_JoyBallEvent;
pub struct Struct_SDL_JoyHatEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    hat: Uint8,
    value: Uint8,
    padding1: Uint8,
    padding2: Uint8,
}
pub type SDL_JoyHatEvent = Struct_SDL_JoyHatEvent;
pub struct Struct_SDL_JoyButtonEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    button: Uint8,
    state: Uint8,
    padding1: Uint8,
    padding2: Uint8,
}
pub type SDL_JoyButtonEvent = Struct_SDL_JoyButtonEvent;
pub struct Struct_SDL_JoyDeviceEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: Sint32,
}
pub type SDL_JoyDeviceEvent = Struct_SDL_JoyDeviceEvent;
pub struct Struct_SDL_ControllerAxisEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    axis: Uint8,
    padding1: Uint8,
    padding2: Uint8,
    padding3: Uint8,
    value: Sint16,
    padding4: Uint16,
}
pub type SDL_ControllerAxisEvent = Struct_SDL_ControllerAxisEvent;
pub struct Struct_SDL_ControllerButtonEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: SDL_JoystickID,
    button: Uint8,
    state: Uint8,
    padding1: Uint8,
    padding2: Uint8,
}
pub type SDL_ControllerButtonEvent = Struct_SDL_ControllerButtonEvent;
pub struct Struct_SDL_ControllerDeviceEvent {
    _type: Uint32,
    timestamp: Uint32,
    which: Sint32,
}
pub type SDL_ControllerDeviceEvent = Struct_SDL_ControllerDeviceEvent;
pub struct Struct_SDL_TouchFingerEvent {
    _type: Uint32,
    timestamp: Uint32,
    touchId: SDL_TouchID,
    fingerId: SDL_FingerID,
    x: c_float,
    y: c_float,
    dx: c_float,
    dy: c_float,
    pressure: c_float,
}
pub type SDL_TouchFingerEvent = Struct_SDL_TouchFingerEvent;
pub struct Struct_SDL_MultiGestureEvent {
    _type: Uint32,
    timestamp: Uint32,
    touchId: SDL_TouchID,
    dTheta: c_float,
    dDist: c_float,
    x: c_float,
    y: c_float,
    numFingers: Uint16,
    padding: Uint16,
}
pub type SDL_MultiGestureEvent = Struct_SDL_MultiGestureEvent;
pub struct Struct_SDL_DollarGestureEvent {
    _type: Uint32,
    timestamp: Uint32,
    touchId: SDL_TouchID,
    gestureId: SDL_GestureID,
    numFingers: Uint32,
    error: c_float,
    x: c_float,
    y: c_float,
}
pub type SDL_DollarGestureEvent = Struct_SDL_DollarGestureEvent;
pub struct Struct_SDL_DropEvent {
    _type: Uint32,
    timestamp: Uint32,
    file: *mut c_schar,
}
pub type SDL_DropEvent = Struct_SDL_DropEvent;
pub struct Struct_SDL_QuitEvent {
    _type: Uint32,
    timestamp: Uint32,
}
pub type SDL_QuitEvent = Struct_SDL_QuitEvent;
pub struct Struct_SDL_OSEvent {
    _type: Uint32,
    timestamp: Uint32,
}
pub type SDL_OSEvent = Struct_SDL_OSEvent;
pub struct Struct_SDL_UserEvent {
    _type: Uint32,
    timestamp: Uint32,
    windowID: Uint32,
    code: Sint32,
    data1: *mut c_void,
    data2: *mut c_void,
}
pub type SDL_UserEvent = Struct_SDL_UserEvent;
pub type Struct_SDL_SysWMmsg = c_void;
pub type SDL_SysWMmsg = Struct_SDL_SysWMmsg;
pub struct Struct_SDL_SysWMEvent {
    _type: Uint32,
    timestamp: Uint32,
    msg: *mut SDL_SysWMmsg,
}
pub type SDL_SysWMEvent = Struct_SDL_SysWMEvent;
pub struct Union_SDL_Event {
    data: [Uint8, ..56u],
}
impl Union_SDL_Event {
    pub fn _type(&mut self) -> *mut Uint32 {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn common(&mut self) -> *mut SDL_CommonEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn window(&mut self) -> *mut SDL_WindowEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn key(&mut self) -> *mut SDL_KeyboardEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn edit(&mut self) -> *mut SDL_TextEditingEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn text(&mut self) -> *mut SDL_TextInputEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn motion(&mut self) -> *mut SDL_MouseMotionEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn button(&mut self) -> *mut SDL_MouseButtonEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn wheel(&mut self) -> *mut SDL_MouseWheelEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn jaxis(&mut self) -> *mut SDL_JoyAxisEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn jball(&mut self) -> *mut SDL_JoyBallEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn jhat(&mut self) -> *mut SDL_JoyHatEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn jbutton(&mut self) -> *mut SDL_JoyButtonEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn jdevice(&mut self) -> *mut SDL_JoyDeviceEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn caxis(&mut self) -> *mut SDL_ControllerAxisEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn cbutton(&mut self) -> *mut SDL_ControllerButtonEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn cdevice(&mut self) -> *mut SDL_ControllerDeviceEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn quit(&mut self) -> *mut SDL_QuitEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn user(&mut self) -> *mut SDL_UserEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn syswm(&mut self) -> *mut SDL_SysWMEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn tfinger(&mut self) -> *mut SDL_TouchFingerEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn mgesture(&mut self) -> *mut SDL_MultiGestureEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn dgesture(&mut self) -> *mut SDL_DollarGestureEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn drop(&mut self) -> *mut SDL_DropEvent {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn padding(&mut self) -> *mut [Uint8, ..56u] {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type SDL_Event = Union_SDL_Event;
pub type SDL_eventaction = c_uint;
pub static SDL_ADDEVENT: c_uint = 0;
pub static SDL_PEEKEVENT: c_uint = 1;
pub static SDL_GETEVENT: c_uint = 2;
pub type SDL_EventFilter =
    extern "C" fn(arg1: *mut c_void, arg2: *mut SDL_Event) -> c_int;
pub type Struct__SDL_Haptic = c_void;
pub type SDL_Haptic = Struct__SDL_Haptic;
pub struct Struct_SDL_HapticDirection {
    _type: Uint8,
    dir: [Sint32, ..3u],
}
pub type SDL_HapticDirection = Struct_SDL_HapticDirection;
pub struct Struct_SDL_HapticConstant {
    _type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    level: Sint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
}
pub type SDL_HapticConstant = Struct_SDL_HapticConstant;
pub struct Struct_SDL_HapticPeriodic {
    _type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    period: Uint16,
    magnitude: Sint16,
    offset: Sint16,
    phase: Uint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
}
pub type SDL_HapticPeriodic = Struct_SDL_HapticPeriodic;
pub struct Struct_SDL_HapticCondition {
    _type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    right_sat: [Uint16, ..3u],
    left_sat: [Uint16, ..3u],
    right_coeff: [Sint16, ..3u],
    left_coeff: [Sint16, ..3u],
    deadband: [Uint16, ..3u],
    center: [Sint16, ..3u],
}
pub type SDL_HapticCondition = Struct_SDL_HapticCondition;
pub struct Struct_SDL_HapticRamp {
    _type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    start: Sint16,
    end: Sint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
}
pub type SDL_HapticRamp = Struct_SDL_HapticRamp;
pub struct Struct_SDL_HapticLeftRight {
    _type: Uint16,
    length: Uint32,
    large_magnitude: Uint16,
    small_magnitude: Uint16,
}
pub type SDL_HapticLeftRight = Struct_SDL_HapticLeftRight;
pub struct Struct_SDL_HapticCustom {
    _type: Uint16,
    direction: SDL_HapticDirection,
    length: Uint32,
    delay: Uint16,
    button: Uint16,
    interval: Uint16,
    channels: Uint8,
    period: Uint16,
    samples: Uint16,
    data: *mut Uint16,
    attack_length: Uint16,
    attack_level: Uint16,
    fade_length: Uint16,
    fade_level: Uint16,
}
pub type SDL_HapticCustom = Struct_SDL_HapticCustom;
pub struct Union_SDL_HapticEffect {
    data: [c_uchar, ..0u],
}
impl Union_SDL_HapticEffect {
    pub fn _type(&mut self) -> *mut Uint16 {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn constant(&mut self) -> *mut SDL_HapticConstant {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn periodic(&mut self) -> *mut SDL_HapticPeriodic {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn condition(&mut self) -> *mut SDL_HapticCondition {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn ramp(&mut self) -> *mut SDL_HapticRamp {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn leftright(&mut self) -> *mut SDL_HapticLeftRight {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
    pub fn custom(&mut self) -> *mut SDL_HapticCustom {
        unsafe { std::cast::transmute(std::ptr::to_mut_unsafe_ptr(self)) }
    }
}
pub type SDL_HapticEffect = Union_SDL_HapticEffect;
pub type SDL_HintPriority = c_uint;
pub static SDL_HINT_DEFAULT: c_uint = 0;
pub static SDL_HINT_NORMAL: c_uint = 1;
pub static SDL_HINT_OVERRIDE: c_uint = 2;
pub type SDL_HintCallback =
    extern "C" fn
        (arg1: *mut c_void, arg2: *c_schar, arg3: *c_schar, arg4: *c_schar);
pub type Enum_Unnamed14 = c_uint;
pub static SDL_LOG_CATEGORY_APPLICATION: c_uint = 0;
pub static SDL_LOG_CATEGORY_ERROR: c_uint = 1;
pub static SDL_LOG_CATEGORY_ASSERT: c_uint = 2;
pub static SDL_LOG_CATEGORY_SYSTEM: c_uint = 3;
pub static SDL_LOG_CATEGORY_AUDIO: c_uint = 4;
pub static SDL_LOG_CATEGORY_VIDEO: c_uint = 5;
pub static SDL_LOG_CATEGORY_RENDER: c_uint = 6;
pub static SDL_LOG_CATEGORY_INPUT: c_uint = 7;
pub static SDL_LOG_CATEGORY_TEST: c_uint = 8;
pub static SDL_LOG_CATEGORY_RESERVED1: c_uint = 9;
pub static SDL_LOG_CATEGORY_RESERVED2: c_uint = 10;
pub static SDL_LOG_CATEGORY_RESERVED3: c_uint = 11;
pub static SDL_LOG_CATEGORY_RESERVED4: c_uint = 12;
pub static SDL_LOG_CATEGORY_RESERVED5: c_uint = 13;
pub static SDL_LOG_CATEGORY_RESERVED6: c_uint = 14;
pub static SDL_LOG_CATEGORY_RESERVED7: c_uint = 15;
pub static SDL_LOG_CATEGORY_RESERVED8: c_uint = 16;
pub static SDL_LOG_CATEGORY_RESERVED9: c_uint = 17;
pub static SDL_LOG_CATEGORY_RESERVED10: c_uint = 18;
pub static SDL_LOG_CATEGORY_CUSTOM: c_uint = 19;
pub type SDL_LogPriority = c_uint;
pub static SDL_LOG_PRIORITY_VERBOSE: c_uint = 1;
pub static SDL_LOG_PRIORITY_DEBUG: c_uint = 2;
pub static SDL_LOG_PRIORITY_INFO: c_uint = 3;
pub static SDL_LOG_PRIORITY_WARN: c_uint = 4;
pub static SDL_LOG_PRIORITY_ERROR: c_uint = 5;
pub static SDL_LOG_PRIORITY_CRITICAL: c_uint = 6;
pub static SDL_NUM_LOG_PRIORITIES: c_uint = 7;
pub type SDL_LogOutputFunction =
    extern "C" fn
        (arg1: *mut c_void, arg2: c_int, arg3: SDL_LogPriority,
         arg4: *c_schar);
pub type SDL_MessageBoxFlags = c_uint;
pub static SDL_MESSAGEBOX_ERROR: c_uint = 16;
pub static SDL_MESSAGEBOX_WARNING: c_uint = 32;
pub static SDL_MESSAGEBOX_INFORMATION: c_uint = 64;
pub type SDL_MessageBoxButtonFlags = c_uint;
pub static SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT: c_uint = 1;
pub static SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT: c_uint = 2;
pub struct SDL_MessageBoxButtonData {
    flags: Uint32,
    buttonid: c_int,
    text: *c_schar,
}
pub struct SDL_MessageBoxColor {
    r: Uint8,
    g: Uint8,
    b: Uint8,
}
pub type SDL_MessageBoxColorType = c_uint;
pub static SDL_MESSAGEBOX_COLOR_BACKGROUND: c_uint = 0;
pub static SDL_MESSAGEBOX_COLOR_TEXT: c_uint = 1;
pub static SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: c_uint = 2;
pub static SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: c_uint = 3;
pub static SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: c_uint = 4;
pub static SDL_MESSAGEBOX_COLOR_MAX: c_uint = 5;
pub struct SDL_MessageBoxColorScheme {
    colors: [SDL_MessageBoxColor, ..5u],
}
pub struct SDL_MessageBoxData {
    flags: Uint32,
    window: *mut SDL_Window,
    title: *c_schar,
    message: *c_schar,
    numbuttons: c_int,
    buttons: *SDL_MessageBoxButtonData,
    colorScheme: *SDL_MessageBoxColorScheme,
}
pub type SDL_PowerState = c_uint;
pub static SDL_POWERSTATE_UNKNOWN: c_uint = 0;
pub static SDL_POWERSTATE_ON_BATTERY: c_uint = 1;
pub static SDL_POWERSTATE_NO_BATTERY: c_uint = 2;
pub static SDL_POWERSTATE_CHARGING: c_uint = 3;
pub static SDL_POWERSTATE_CHARGED: c_uint = 4;
pub type SDL_RendererFlags = c_uint;
pub static SDL_RENDERER_SOFTWARE: c_uint = 1;
pub static SDL_RENDERER_ACCELERATED: c_uint = 2;
pub static SDL_RENDERER_PRESENTVSYNC: c_uint = 4;
pub static SDL_RENDERER_TARGETTEXTURE: c_uint = 8;
pub struct Struct_SDL_RendererInfo {
    name: *c_schar,
    flags: Uint32,
    num_texture_formats: Uint32,
    texture_formats: [Uint32, ..16u],
    max_texture_width: c_int,
    max_texture_height: c_int,
}
pub type SDL_RendererInfo = Struct_SDL_RendererInfo;
pub type SDL_TextureAccess = c_uint;
pub static SDL_TEXTUREACCESS_STATIC: c_uint = 0;
pub static SDL_TEXTUREACCESS_STREAMING: c_uint = 1;
pub static SDL_TEXTUREACCESS_TARGET: c_uint = 2;
pub type SDL_TextureModulate = c_uint;
pub static SDL_TEXTUREMODULATE_NONE: c_uint = 0;
pub static SDL_TEXTUREMODULATE_COLOR: c_uint = 1;
pub static SDL_TEXTUREMODULATE_ALPHA: c_uint = 2;
pub type SDL_RendererFlip = c_uint;
pub static SDL_FLIP_NONE: c_uint = 0;
pub static SDL_FLIP_HORIZONTAL: c_uint = 1;
pub static SDL_FLIP_VERTICAL: c_uint = 2;
pub type Struct_SDL_Renderer = c_void;
pub type SDL_Renderer = Struct_SDL_Renderer;
pub type Struct_SDL_Texture = c_void;
pub type SDL_Texture = Struct_SDL_Texture;
pub type SDL_TimerCallback =
    extern "C" fn(arg1: Uint32, arg2: *mut c_void) -> Uint32;
pub type SDL_TimerID = c_int;
pub struct Struct_SDL_version {
    major: Uint8,
    minor: Uint8,
    patch: Uint8,
}
pub type SDL_version = Struct_SDL_version;
extern "C" {
    pub fn SDL_GetPlatform() -> *c_schar;
    pub fn SDL_malloc(size: size_t) -> *mut c_void;
    pub fn SDL_calloc(nmemb: size_t, size: size_t) -> *mut c_void;
    pub fn SDL_realloc(mem: *mut c_void, size: size_t) -> *mut c_void;
    pub fn SDL_free(mem: *mut c_void);
    pub fn SDL_getenv(name: *c_schar) -> *mut c_schar;
    pub fn SDL_setenv(name: *c_schar, value: *c_schar, overwrite: c_int) ->
     c_int;
    pub fn SDL_qsort(base: *mut c_void, nmemb: size_t, size: size_t,
                     compare:
                         extern "C" fn(arg1: *c_void, arg2: *c_void)
                             -> c_int);
    pub fn SDL_abs(x: c_int) -> c_int;
    pub fn SDL_isdigit(x: c_int) -> c_int;
    pub fn SDL_isspace(x: c_int) -> c_int;
    pub fn SDL_toupper(x: c_int) -> c_int;
    pub fn SDL_tolower(x: c_int) -> c_int;
    pub fn SDL_memset(dst: *mut c_void, c: c_int, len: size_t) -> *mut c_void;
    pub fn SDL_memcpy(dst: *mut c_void, src: *c_void, len: size_t) ->
     *mut c_void;
    pub fn SDL_memmove(dst: *mut c_void, src: *c_void, len: size_t) ->
     *mut c_void;
    pub fn SDL_memcmp(s1: *c_void, s2: *c_void, len: size_t) -> c_int;
    pub fn SDL_wcslen(wstr: *wchar_t) -> size_t;
    pub fn SDL_wcslcpy(dst: *mut wchar_t, src: *wchar_t, maxlen: size_t) ->
     size_t;
    pub fn SDL_wcslcat(dst: *mut wchar_t, src: *wchar_t, maxlen: size_t) ->
     size_t;
    pub fn SDL_strlen(str: *c_schar) -> size_t;
    pub fn SDL_strlcpy(dst: *mut c_schar, src: *c_schar, maxlen: size_t) ->
     size_t;
    pub fn SDL_utf8strlcpy(dst: *mut c_schar, src: *c_schar,
                           dst_bytes: size_t) -> size_t;
    pub fn SDL_strlcat(dst: *mut c_schar, src: *c_schar, maxlen: size_t) ->
     size_t;
    pub fn SDL_strdup(str: *c_schar) -> *mut c_schar;
    pub fn SDL_strrev(str: *mut c_schar) -> *mut c_schar;
    pub fn SDL_strupr(str: *mut c_schar) -> *mut c_schar;
    pub fn SDL_strlwr(str: *mut c_schar) -> *mut c_schar;
    pub fn SDL_strchr(str: *c_schar, c: c_int) -> *mut c_schar;
    pub fn SDL_strrchr(str: *c_schar, c: c_int) -> *mut c_schar;
    pub fn SDL_strstr(haystack: *c_schar, needle: *c_schar) -> *mut c_schar;
    pub fn SDL_itoa(value: c_int, str: *mut c_schar, radix: c_int) ->
     *mut c_schar;
    pub fn SDL_uitoa(value: c_uint, str: *mut c_schar, radix: c_int) ->
     *mut c_schar;
    pub fn SDL_ltoa(value: c_long, str: *mut c_schar, radix: c_int) ->
     *mut c_schar;
    pub fn SDL_ultoa(value: c_ulong, str: *mut c_schar, radix: c_int) ->
     *mut c_schar;
    pub fn SDL_lltoa(value: Sint64, str: *mut c_schar, radix: c_int) ->
     *mut c_schar;
    pub fn SDL_ulltoa(value: Uint64, str: *mut c_schar, radix: c_int) ->
     *mut c_schar;
    pub fn SDL_atoi(str: *c_schar) -> c_int;
    pub fn SDL_atof(str: *c_schar) -> c_double;
    pub fn SDL_strtol(str: *c_schar, endp: *mut *mut c_schar, base: c_int) ->
     c_long;
    pub fn SDL_strtoul(str: *c_schar, endp: *mut *mut c_schar, base: c_int) ->
     c_ulong;
    pub fn SDL_strtoll(str: *c_schar, endp: *mut *mut c_schar, base: c_int) ->
     Sint64;
    pub fn SDL_strtoull(str: *c_schar, endp: *mut *mut c_schar, base: c_int)
     -> Uint64;
    pub fn SDL_strtod(str: *c_schar, endp: *mut *mut c_schar) -> c_double;
    pub fn SDL_strcmp(str1: *c_schar, str2: *c_schar) -> c_int;
    pub fn SDL_strncmp(str1: *c_schar, str2: *c_schar, maxlen: size_t) ->
     c_int;
    pub fn SDL_strcasecmp(str1: *c_schar, str2: *c_schar) -> c_int;
    pub fn SDL_strncasecmp(str1: *c_schar, str2: *c_schar, len: size_t) ->
     c_int;
    pub fn SDL_sscanf(text: *c_schar, fmt: *c_schar) -> c_int;
    pub fn SDL_snprintf(text: *mut c_schar, maxlen: size_t, fmt: *c_schar) ->
     c_int;
    pub fn SDL_atan(x: c_double) -> c_double;
    pub fn SDL_atan2(x: c_double, y: c_double) -> c_double;
    pub fn SDL_ceil(x: c_double) -> c_double;
    pub fn SDL_copysign(x: c_double, y: c_double) -> c_double;
    pub fn SDL_cos(x: c_double) -> c_double;
    pub fn SDL_cosf(x: c_float) -> c_float;
    pub fn SDL_fabs(x: c_double) -> c_double;
    pub fn SDL_floor(x: c_double) -> c_double;
    pub fn SDL_log(x: c_double) -> c_double;
    pub fn SDL_pow(x: c_double, y: c_double) -> c_double;
    pub fn SDL_scalbn(x: c_double, n: c_int) -> c_double;
    pub fn SDL_sin(x: c_double) -> c_double;
    pub fn SDL_sinf(x: c_float) -> c_float;
    pub fn SDL_sqrt(x: c_double) -> c_double;
    pub fn SDL_iconv_open(tocode: *c_schar, fromcode: *c_schar) ->
     SDL_iconv_t;
    pub fn SDL_iconv_close(cd: SDL_iconv_t) -> c_int;
    pub fn SDL_iconv(cd: SDL_iconv_t, inbuf: *mut *c_schar,
                     inbytesleft: *mut size_t, outbuf: *mut *mut c_schar,
                     outbytesleft: *mut size_t) -> size_t;
    pub fn SDL_iconv_string(tocode: *c_schar, fromcode: *c_schar,
                            inbuf: *c_schar, inbytesleft: size_t) ->
     *mut c_schar;
    pub fn SDL_main(argc: c_int, argv: c_void) -> c_int;
    pub fn SDL_SetMainReady();
    pub fn SDL_ReportAssertion(arg1: *mut SDL_assert_data, arg2: *c_schar,
                               arg3: *c_schar, arg4: c_int) ->
     SDL_assert_state;
    pub fn SDL_SetAssertionHandler(handler: SDL_AssertionHandler,
                                   userdata: *mut c_void);
    pub fn SDL_GetAssertionReport() -> *SDL_assert_data;
    pub fn SDL_ResetAssertionReport();
    pub fn SDL_AtomicTryLock(lock: *mut SDL_SpinLock) -> SDL_bool;
    pub fn SDL_AtomicLock(lock: *mut SDL_SpinLock);
    pub fn SDL_AtomicUnlock(lock: *mut SDL_SpinLock);
    pub fn SDL_SetError(fmt: *c_schar) -> c_int;
    pub fn SDL_GetError() -> *c_schar;
    pub fn SDL_ClearError();
    pub fn SDL_Error(code: SDL_errorcode) -> c_int;
    pub fn SDL_CreateMutex() -> *mut SDL_mutex;
    pub fn SDL_LockMutex(mutex: *mut SDL_mutex) -> c_int;
    pub fn SDL_TryLockMutex(mutex: *mut SDL_mutex) -> c_int;
    pub fn SDL_UnlockMutex(mutex: *mut SDL_mutex) -> c_int;
    pub fn SDL_DestroyMutex(mutex: *mut SDL_mutex);
    pub fn SDL_CreateSemaphore(initial_value: Uint32) -> *mut SDL_sem;
    pub fn SDL_DestroySemaphore(sem: *mut SDL_sem);
    pub fn SDL_SemWait(sem: *mut SDL_sem) -> c_int;
    pub fn SDL_SemTryWait(sem: *mut SDL_sem) -> c_int;
    pub fn SDL_SemWaitTimeout(sem: *mut SDL_sem, ms: Uint32) -> c_int;
    pub fn SDL_SemPost(sem: *mut SDL_sem) -> c_int;
    pub fn SDL_SemValue(sem: *mut SDL_sem) -> Uint32;
    pub fn SDL_CreateCond() -> *mut SDL_cond;
    pub fn SDL_DestroyCond(cond: *mut SDL_cond);
    pub fn SDL_CondSignal(cond: *mut SDL_cond) -> c_int;
    pub fn SDL_CondBroadcast(cond: *mut SDL_cond) -> c_int;
    pub fn SDL_CondWait(cond: *mut SDL_cond, mutex: *mut SDL_mutex) -> c_int;
    pub fn SDL_CondWaitTimeout(cond: *mut SDL_cond, mutex: *mut SDL_mutex,
                               ms: Uint32) -> c_int;
    pub fn SDL_CreateThread(_fn: SDL_ThreadFunction, name: *c_schar,
                            data: *mut c_void) -> *mut SDL_Thread;
    pub fn SDL_GetThreadName(thread: *mut SDL_Thread) -> *c_schar;
    pub fn SDL_ThreadID() -> SDL_threadID;
    pub fn SDL_GetThreadID(thread: *mut SDL_Thread) -> SDL_threadID;
    pub fn SDL_SetThreadPriority(priority: SDL_ThreadPriority) -> c_int;
    pub fn SDL_WaitThread(thread: *mut SDL_Thread, status: *mut c_int);
    pub fn SDL_TLSCreate() -> SDL_TLSID;
    pub fn SDL_TLSGet(id: SDL_TLSID) -> *mut c_void;
    pub fn SDL_TLSSet(id: SDL_TLSID, value: *c_void,
                      destructor: extern "C" fn(arg1: *mut c_void)) -> c_int;
    pub fn SDL_RWFromFile(file: *c_schar, mode: *c_schar) -> *mut SDL_RWops;
    pub fn SDL_RWFromFP(fp: *mut FILE, autoclose: SDL_bool) -> *mut SDL_RWops;
    pub fn SDL_RWFromMem(mem: *mut c_void, size: c_int) -> *mut SDL_RWops;
    pub fn SDL_RWFromConstMem(mem: *c_void, size: c_int) -> *mut SDL_RWops;
    pub fn SDL_AllocRW() -> *mut SDL_RWops;
    pub fn SDL_FreeRW(area: *mut SDL_RWops);
    pub fn SDL_ReadU8(src: *mut SDL_RWops) -> Uint8;
    pub fn SDL_ReadLE16(src: *mut SDL_RWops) -> Uint16;
    pub fn SDL_ReadBE16(src: *mut SDL_RWops) -> Uint16;
    pub fn SDL_ReadLE32(src: *mut SDL_RWops) -> Uint32;
    pub fn SDL_ReadBE32(src: *mut SDL_RWops) -> Uint32;
    pub fn SDL_ReadLE64(src: *mut SDL_RWops) -> Uint64;
    pub fn SDL_ReadBE64(src: *mut SDL_RWops) -> Uint64;
    pub fn SDL_WriteU8(dst: *mut SDL_RWops, value: Uint8) -> size_t;
    pub fn SDL_WriteLE16(dst: *mut SDL_RWops, value: Uint16) -> size_t;
    pub fn SDL_WriteBE16(dst: *mut SDL_RWops, value: Uint16) -> size_t;
    pub fn SDL_WriteLE32(dst: *mut SDL_RWops, value: Uint32) -> size_t;
    pub fn SDL_WriteBE32(dst: *mut SDL_RWops, value: Uint32) -> size_t;
    pub fn SDL_WriteLE64(dst: *mut SDL_RWops, value: Uint64) -> size_t;
    pub fn SDL_WriteBE64(dst: *mut SDL_RWops, value: Uint64) -> size_t;
    pub fn SDL_GetNumAudioDrivers() -> c_int;
    pub fn SDL_GetAudioDriver(index: c_int) -> *c_schar;
    pub fn SDL_AudioInit(driver_name: *c_schar) -> c_int;
    pub fn SDL_AudioQuit();
    pub fn SDL_GetCurrentAudioDriver() -> *c_schar;
    pub fn SDL_OpenAudio(desired: *mut SDL_AudioSpec,
                         obtained: *mut SDL_AudioSpec) -> c_int;
    pub fn SDL_GetNumAudioDevices(iscapture: c_int) -> c_int;
    pub fn SDL_GetAudioDeviceName(index: c_int, iscapture: c_int) -> *c_schar;
    pub fn SDL_OpenAudioDevice(device: *c_schar, iscapture: c_int,
                               desired: *SDL_AudioSpec,
                               obtained: *mut SDL_AudioSpec,
                               allowed_changes: c_int) -> SDL_AudioDeviceID;
    pub fn SDL_GetAudioStatus() -> SDL_AudioStatus;
    pub fn SDL_GetAudioDeviceStatus(dev: SDL_AudioDeviceID) ->
     SDL_AudioStatus;
    pub fn SDL_PauseAudio(pause_on: c_int);
    pub fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID, pause_on: c_int);
    pub fn SDL_LoadWAV_RW(src: *mut SDL_RWops, freesrc: c_int,
                          spec: *mut SDL_AudioSpec,
                          audio_buf: *mut *mut Uint8, audio_len: *mut Uint32)
     -> *mut SDL_AudioSpec;
    pub fn SDL_FreeWAV(audio_buf: *mut Uint8);
    pub fn SDL_BuildAudioCVT(cvt: *mut SDL_AudioCVT,
                             src_format: SDL_AudioFormat, src_channels: Uint8,
                             src_rate: c_int, dst_format: SDL_AudioFormat,
                             dst_channels: Uint8, dst_rate: c_int) -> c_int;
    pub fn SDL_ConvertAudio(cvt: *mut SDL_AudioCVT) -> c_int;
    pub fn SDL_MixAudio(dst: *mut Uint8, src: *Uint8, len: Uint32,
                        volume: c_int);
    pub fn SDL_MixAudioFormat(dst: *mut Uint8, src: *Uint8,
                              format: SDL_AudioFormat, len: Uint32,
                              volume: c_int);
    pub fn SDL_LockAudio();
    pub fn SDL_LockAudioDevice(dev: SDL_AudioDeviceID);
    pub fn SDL_UnlockAudio();
    pub fn SDL_UnlockAudioDevice(dev: SDL_AudioDeviceID);
    pub fn SDL_CloseAudio();
    pub fn SDL_CloseAudioDevice(dev: SDL_AudioDeviceID);
    pub fn SDL_SetClipboardText(text: *c_schar) -> c_int;
    pub fn SDL_GetClipboardText() -> *mut c_schar;
    pub fn SDL_HasClipboardText() -> SDL_bool;
    pub fn SDL_GetCPUCount() -> c_int;
    pub fn SDL_GetCPUCacheLineSize() -> c_int;
    pub fn SDL_HasRDTSC() -> SDL_bool;
    pub fn SDL_HasAltiVec() -> SDL_bool;
    pub fn SDL_HasMMX() -> SDL_bool;
    pub fn SDL_Has3DNow() -> SDL_bool;
    pub fn SDL_HasSSE() -> SDL_bool;
    pub fn SDL_HasSSE2() -> SDL_bool;
    pub fn SDL_HasSSE3() -> SDL_bool;
    pub fn SDL_HasSSE41() -> SDL_bool;
    pub fn SDL_HasSSE42() -> SDL_bool;
    pub fn SDL_GetPixelFormatName(format: Uint32) -> *c_schar;
    pub fn SDL_PixelFormatEnumToMasks(format: Uint32, bpp: *mut c_int,
                                      Rmask: *mut Uint32, Gmask: *mut Uint32,
                                      Bmask: *mut Uint32, Amask: *mut Uint32)
     -> SDL_bool;
    pub fn SDL_MasksToPixelFormatEnum(bpp: c_int, Rmask: Uint32,
                                      Gmask: Uint32, Bmask: Uint32,
                                      Amask: Uint32) -> Uint32;
    pub fn SDL_AllocFormat(pixel_format: Uint32) -> *mut SDL_PixelFormat;
    pub fn SDL_FreeFormat(format: *mut SDL_PixelFormat);
    pub fn SDL_AllocPalette(ncolors: c_int) -> *mut SDL_Palette;
    pub fn SDL_SetPixelFormatPalette(format: *mut SDL_PixelFormat,
                                     palette: *mut SDL_Palette) -> c_int;
    pub fn SDL_SetPaletteColors(palette: *mut SDL_Palette, colors: *SDL_Color,
                                firstcolor: c_int, ncolors: c_int) -> c_int;
    pub fn SDL_FreePalette(palette: *mut SDL_Palette);
    pub fn SDL_MapRGB(format: *SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8)
     -> Uint32;
    pub fn SDL_MapRGBA(format: *SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8,
                       a: Uint8) -> Uint32;
    pub fn SDL_GetRGB(pixel: Uint32, format: *SDL_PixelFormat, r: *mut Uint8,
                      g: *mut Uint8, b: *mut Uint8);
    pub fn SDL_GetRGBA(pixel: Uint32, format: *SDL_PixelFormat, r: *mut Uint8,
                       g: *mut Uint8, b: *mut Uint8, a: *mut Uint8);
    pub fn SDL_CalculateGammaRamp(gamma: c_float, ramp: *mut Uint16);
    pub fn SDL_HasIntersection(A: *SDL_Rect, B: *SDL_Rect) -> SDL_bool;
    pub fn SDL_IntersectRect(A: *SDL_Rect, B: *SDL_Rect,
                             result: *mut SDL_Rect) -> SDL_bool;
    pub fn SDL_UnionRect(A: *SDL_Rect, B: *SDL_Rect, result: *mut SDL_Rect);
    pub fn SDL_EnclosePoints(points: *SDL_Point, count: c_int,
                             clip: *SDL_Rect, result: *mut SDL_Rect) ->
     SDL_bool;
    pub fn SDL_IntersectRectAndLine(rect: *SDL_Rect, X1: *mut c_int,
                                    Y1: *mut c_int, X2: *mut c_int,
                                    Y2: *mut c_int) -> SDL_bool;
    pub fn SDL_CreateRGBSurface(flags: Uint32, width: c_int, height: c_int,
                                depth: c_int, Rmask: Uint32, Gmask: Uint32,
                                Bmask: Uint32, Amask: Uint32) ->
     *mut SDL_Surface;
    pub fn SDL_CreateRGBSurfaceFrom(pixels: *mut c_void, width: c_int,
                                    height: c_int, depth: c_int, pitch: c_int,
                                    Rmask: Uint32, Gmask: Uint32,
                                    Bmask: Uint32, Amask: Uint32) ->
     *mut SDL_Surface;
    pub fn SDL_FreeSurface(surface: *mut SDL_Surface);
    pub fn SDL_SetSurfacePalette(surface: *mut SDL_Surface,
                                 palette: *mut SDL_Palette) -> c_int;
    pub fn SDL_LockSurface(surface: *mut SDL_Surface) -> c_int;
    pub fn SDL_UnlockSurface(surface: *mut SDL_Surface);
    pub fn SDL_LoadBMP_RW(src: *mut SDL_RWops, freesrc: c_int) ->
     *mut SDL_Surface;
    pub fn SDL_SaveBMP_RW(surface: *mut SDL_Surface, dst: *mut SDL_RWops,
                          freedst: c_int) -> c_int;
    pub fn SDL_SetSurfaceRLE(surface: *mut SDL_Surface, flag: c_int) -> c_int;
    pub fn SDL_SetColorKey(surface: *mut SDL_Surface, flag: c_int,
                           key: Uint32) -> c_int;
    pub fn SDL_GetColorKey(surface: *mut SDL_Surface, key: *mut Uint32) ->
     c_int;
    pub fn SDL_SetSurfaceColorMod(surface: *mut SDL_Surface, r: Uint8,
                                  g: Uint8, b: Uint8) -> c_int;
    pub fn SDL_GetSurfaceColorMod(surface: *mut SDL_Surface, r: *mut Uint8,
                                  g: *mut Uint8, b: *mut Uint8) -> c_int;
    pub fn SDL_SetSurfaceAlphaMod(surface: *mut SDL_Surface, alpha: Uint8) ->
     c_int;
    pub fn SDL_GetSurfaceAlphaMod(surface: *mut SDL_Surface,
                                  alpha: *mut Uint8) -> c_int;
    pub fn SDL_SetSurfaceBlendMode(surface: *mut SDL_Surface,
                                   blendMode: SDL_BlendMode) -> c_int;
    pub fn SDL_GetSurfaceBlendMode(surface: *mut SDL_Surface,
                                   blendMode: *mut SDL_BlendMode) -> c_int;
    pub fn SDL_SetClipRect(surface: *mut SDL_Surface, rect: *SDL_Rect) ->
     SDL_bool;
    pub fn SDL_GetClipRect(surface: *mut SDL_Surface, rect: *mut SDL_Rect);
    pub fn SDL_ConvertSurface(src: *mut SDL_Surface,
                              fmt: *mut SDL_PixelFormat, flags: Uint32) ->
     *mut SDL_Surface;
    pub fn SDL_ConvertSurfaceFormat(src: *mut SDL_Surface,
                                    pixel_format: Uint32, flags: Uint32) ->
     *mut SDL_Surface;
    pub fn SDL_ConvertPixels(width: c_int, height: c_int, src_format: Uint32,
                             src: *c_void, src_pitch: c_int,
                             dst_format: Uint32, dst: *mut c_void,
                             dst_pitch: c_int) -> c_int;
    pub fn SDL_FillRect(dst: *mut SDL_Surface, rect: *SDL_Rect, color: Uint32)
     -> c_int;
    pub fn SDL_FillRects(dst: *mut SDL_Surface, rects: *SDL_Rect,
                         count: c_int, color: Uint32) -> c_int;
    pub fn SDL_UpperBlit(src: *mut SDL_Surface, srcrect: *SDL_Rect,
                         dst: *mut SDL_Surface, dstrect: *mut SDL_Rect) ->
     c_int;
    pub fn SDL_LowerBlit(src: *mut SDL_Surface, srcrect: *mut SDL_Rect,
                         dst: *mut SDL_Surface, dstrect: *mut SDL_Rect) ->
     c_int;
    pub fn SDL_SoftStretch(src: *mut SDL_Surface, srcrect: *SDL_Rect,
                           dst: *mut SDL_Surface, dstrect: *SDL_Rect) ->
     c_int;
    pub fn SDL_UpperBlitScaled(src: *mut SDL_Surface, srcrect: *SDL_Rect,
                               dst: *mut SDL_Surface, dstrect: *mut SDL_Rect)
     -> c_int;
    pub fn SDL_LowerBlitScaled(src: *mut SDL_Surface, srcrect: *mut SDL_Rect,
                               dst: *mut SDL_Surface, dstrect: *mut SDL_Rect)
     -> c_int;
    pub fn SDL_GetNumVideoDrivers() -> c_int;
    pub fn SDL_GetVideoDriver(index: c_int) -> *c_schar;
    pub fn SDL_VideoInit(driver_name: *c_schar) -> c_int;
    pub fn SDL_VideoQuit();
    pub fn SDL_GetCurrentVideoDriver() -> *c_schar;
    pub fn SDL_GetNumVideoDisplays() -> c_int;
    pub fn SDL_GetDisplayName(displayIndex: c_int) -> *c_schar;
    pub fn SDL_GetDisplayBounds(displayIndex: c_int, rect: *mut SDL_Rect) ->
     c_int;
    pub fn SDL_GetNumDisplayModes(displayIndex: c_int) -> c_int;
    pub fn SDL_GetDisplayMode(displayIndex: c_int, modeIndex: c_int,
                              mode: *mut SDL_DisplayMode) -> c_int;
    pub fn SDL_GetDesktopDisplayMode(displayIndex: c_int,
                                     mode: *mut SDL_DisplayMode) -> c_int;
    pub fn SDL_GetCurrentDisplayMode(displayIndex: c_int,
                                     mode: *mut SDL_DisplayMode) -> c_int;
    pub fn SDL_GetClosestDisplayMode(displayIndex: c_int,
                                     mode: *SDL_DisplayMode,
                                     closest: *mut SDL_DisplayMode) ->
     *mut SDL_DisplayMode;
    pub fn SDL_GetWindowDisplayIndex(window: *mut SDL_Window) -> c_int;
    pub fn SDL_SetWindowDisplayMode(window: *mut SDL_Window,
                                    mode: *SDL_DisplayMode) -> c_int;
    pub fn SDL_GetWindowDisplayMode(window: *mut SDL_Window,
                                    mode: *mut SDL_DisplayMode) -> c_int;
    pub fn SDL_GetWindowPixelFormat(window: *mut SDL_Window) -> Uint32;
    pub fn SDL_CreateWindow(title: *c_schar, x: c_int, y: c_int, w: c_int,
                            h: c_int, flags: Uint32) -> *mut SDL_Window;
    pub fn SDL_CreateWindowFrom(data: *c_void) -> *mut SDL_Window;
    pub fn SDL_GetWindowID(window: *mut SDL_Window) -> Uint32;
    pub fn SDL_GetWindowFromID(id: Uint32) -> *mut SDL_Window;
    pub fn SDL_GetWindowFlags(window: *mut SDL_Window) -> Uint32;
    pub fn SDL_SetWindowTitle(window: *mut SDL_Window, title: *c_schar);
    pub fn SDL_GetWindowTitle(window: *mut SDL_Window) -> *c_schar;
    pub fn SDL_SetWindowIcon(window: *mut SDL_Window, icon: *mut SDL_Surface);
    pub fn SDL_SetWindowData(window: *mut SDL_Window, name: *c_schar,
                             userdata: *mut c_void) -> *mut c_void;
    pub fn SDL_GetWindowData(window: *mut SDL_Window, name: *c_schar) ->
     *mut c_void;
    pub fn SDL_SetWindowPosition(window: *mut SDL_Window, x: c_int, y: c_int);
    pub fn SDL_GetWindowPosition(window: *mut SDL_Window, x: *mut c_int,
                                 y: *mut c_int);
    pub fn SDL_SetWindowSize(window: *mut SDL_Window, w: c_int, h: c_int);
    pub fn SDL_GetWindowSize(window: *mut SDL_Window, w: *mut c_int,
                             h: *mut c_int);
    pub fn SDL_SetWindowMinimumSize(window: *mut SDL_Window, min_w: c_int,
                                    min_h: c_int);
    pub fn SDL_GetWindowMinimumSize(window: *mut SDL_Window, w: *mut c_int,
                                    h: *mut c_int);
    pub fn SDL_SetWindowMaximumSize(window: *mut SDL_Window, max_w: c_int,
                                    max_h: c_int);
    pub fn SDL_GetWindowMaximumSize(window: *mut SDL_Window, w: *mut c_int,
                                    h: *mut c_int);
    pub fn SDL_SetWindowBordered(window: *mut SDL_Window, bordered: SDL_bool);
    pub fn SDL_ShowWindow(window: *mut SDL_Window);
    pub fn SDL_HideWindow(window: *mut SDL_Window);
    pub fn SDL_RaiseWindow(window: *mut SDL_Window);
    pub fn SDL_MaximizeWindow(window: *mut SDL_Window);
    pub fn SDL_MinimizeWindow(window: *mut SDL_Window);
    pub fn SDL_RestoreWindow(window: *mut SDL_Window);
    pub fn SDL_SetWindowFullscreen(window: *mut SDL_Window, flags: Uint32) ->
     c_int;
    pub fn SDL_GetWindowSurface(window: *mut SDL_Window) -> *mut SDL_Surface;
    pub fn SDL_UpdateWindowSurface(window: *mut SDL_Window) -> c_int;
    pub fn SDL_UpdateWindowSurfaceRects(window: *mut SDL_Window,
                                        rects: *SDL_Rect, numrects: c_int) ->
     c_int;
    pub fn SDL_SetWindowGrab(window: *mut SDL_Window, grabbed: SDL_bool);
    pub fn SDL_GetWindowGrab(window: *mut SDL_Window) -> SDL_bool;
    pub fn SDL_SetWindowBrightness(window: *mut SDL_Window,
                                   brightness: c_float) -> c_int;
    pub fn SDL_GetWindowBrightness(window: *mut SDL_Window) -> c_float;
    pub fn SDL_SetWindowGammaRamp(window: *mut SDL_Window, red: *Uint16,
                                  green: *Uint16, blue: *Uint16) -> c_int;
    pub fn SDL_GetWindowGammaRamp(window: *mut SDL_Window, red: *mut Uint16,
                                  green: *mut Uint16, blue: *mut Uint16) ->
     c_int;
    pub fn SDL_DestroyWindow(window: *mut SDL_Window);
    pub fn SDL_IsScreenSaverEnabled() -> SDL_bool;
    pub fn SDL_EnableScreenSaver();
    pub fn SDL_DisableScreenSaver();
    pub fn SDL_GL_LoadLibrary(path: *c_schar) -> c_int;
    pub fn SDL_GL_GetProcAddress(proc: *c_schar) -> *mut c_void;
    pub fn SDL_GL_UnloadLibrary();
    pub fn SDL_GL_ExtensionSupported(extension: *c_schar) -> SDL_bool;
    pub fn SDL_GL_SetAttribute(attr: SDL_GLattr, value: c_int) -> c_int;
    pub fn SDL_GL_GetAttribute(attr: SDL_GLattr, value: *mut c_int) -> c_int;
    pub fn SDL_GL_CreateContext(window: *mut SDL_Window) -> SDL_GLContext;
    pub fn SDL_GL_MakeCurrent(window: *mut SDL_Window, context: SDL_GLContext)
     -> c_int;
    pub fn SDL_GL_GetCurrentWindow() -> *mut SDL_Window;
    pub fn SDL_GL_GetCurrentContext() -> SDL_GLContext;
    pub fn SDL_GL_SetSwapInterval(interval: c_int) -> c_int;
    pub fn SDL_GL_GetSwapInterval() -> c_int;
    pub fn SDL_GL_SwapWindow(window: *mut SDL_Window);
    pub fn SDL_GL_DeleteContext(context: SDL_GLContext);
    pub fn SDL_GetKeyboardFocus() -> *mut SDL_Window;
    pub fn SDL_GetKeyboardState(numkeys: *mut c_int) -> *Uint8;
    pub fn SDL_GetModState() -> SDL_Keymod;
    pub fn SDL_SetModState(modstate: SDL_Keymod);
    pub fn SDL_GetKeyFromScancode(scancode: SDL_Scancode) -> SDL_Keycode;
    pub fn SDL_GetScancodeFromKey(key: SDL_Keycode) -> SDL_Scancode;
    pub fn SDL_GetScancodeName(scancode: SDL_Scancode) -> *c_schar;
    pub fn SDL_GetScancodeFromName(name: *c_schar) -> SDL_Scancode;
    pub fn SDL_GetKeyName(key: SDL_Keycode) -> *c_schar;
    pub fn SDL_GetKeyFromName(name: *c_schar) -> SDL_Keycode;
    pub fn SDL_StartTextInput();
    pub fn SDL_IsTextInputActive() -> SDL_bool;
    pub fn SDL_StopTextInput();
    pub fn SDL_SetTextInputRect(rect: *mut SDL_Rect);
    pub fn SDL_HasScreenKeyboardSupport() -> SDL_bool;
    pub fn SDL_IsScreenKeyboardShown(window: *mut SDL_Window) -> SDL_bool;
    pub fn SDL_GetMouseFocus() -> *mut SDL_Window;
    pub fn SDL_GetMouseState(x: *mut c_int, y: *mut c_int) -> Uint32;
    pub fn SDL_GetRelativeMouseState(x: *mut c_int, y: *mut c_int) -> Uint32;
    pub fn SDL_WarpMouseInWindow(window: *mut SDL_Window, x: c_int, y: c_int);
    pub fn SDL_SetRelativeMouseMode(enabled: SDL_bool) -> c_int;
    pub fn SDL_GetRelativeMouseMode() -> SDL_bool;
    pub fn SDL_CreateCursor(data: *Uint8, mask: *Uint8, w: c_int, h: c_int,
                            hot_x: c_int, hot_y: c_int) -> *mut SDL_Cursor;
    pub fn SDL_CreateColorCursor(surface: *mut SDL_Surface, hot_x: c_int,
                                 hot_y: c_int) -> *mut SDL_Cursor;
    pub fn SDL_CreateSystemCursor(id: SDL_SystemCursor) -> *mut SDL_Cursor;
    pub fn SDL_SetCursor(cursor: *mut SDL_Cursor);
    pub fn SDL_GetCursor() -> *mut SDL_Cursor;
    pub fn SDL_GetDefaultCursor() -> *mut SDL_Cursor;
    pub fn SDL_FreeCursor(cursor: *mut SDL_Cursor);
    pub fn SDL_ShowCursor(toggle: c_int) -> c_int;
    pub fn SDL_NumJoysticks() -> c_int;
    pub fn SDL_JoystickNameForIndex(device_index: c_int) -> *c_schar;
    pub fn SDL_JoystickOpen(device_index: c_int) -> *mut SDL_Joystick;
    pub fn SDL_JoystickName(joystick: *mut SDL_Joystick) -> *c_schar;
    pub fn SDL_JoystickGetDeviceGUID(device_index: c_int) -> SDL_JoystickGUID;
    pub fn SDL_JoystickGetGUID(joystick: *mut SDL_Joystick) ->
     SDL_JoystickGUID;
    pub fn SDL_JoystickGetGUIDString(guid: SDL_JoystickGUID,
                                     pszGUID: *mut c_schar, cbGUID: c_int);
    pub fn SDL_JoystickGetGUIDFromString(pchGUID: *c_schar) ->
     SDL_JoystickGUID;
    pub fn SDL_JoystickGetAttached(joystick: *mut SDL_Joystick) -> SDL_bool;
    pub fn SDL_JoystickInstanceID(joystick: *mut SDL_Joystick) ->
     SDL_JoystickID;
    pub fn SDL_JoystickNumAxes(joystick: *mut SDL_Joystick) -> c_int;
    pub fn SDL_JoystickNumBalls(joystick: *mut SDL_Joystick) -> c_int;
    pub fn SDL_JoystickNumHats(joystick: *mut SDL_Joystick) -> c_int;
    pub fn SDL_JoystickNumButtons(joystick: *mut SDL_Joystick) -> c_int;
    pub fn SDL_JoystickUpdate();
    pub fn SDL_JoystickEventState(state: c_int) -> c_int;
    pub fn SDL_JoystickGetAxis(joystick: *mut SDL_Joystick, axis: c_int) ->
     Sint16;
    pub fn SDL_JoystickGetHat(joystick: *mut SDL_Joystick, hat: c_int) ->
     Uint8;
    pub fn SDL_JoystickGetBall(joystick: *mut SDL_Joystick, ball: c_int,
                               dx: *mut c_int, dy: *mut c_int) -> c_int;
    pub fn SDL_JoystickGetButton(joystick: *mut SDL_Joystick, button: c_int)
     -> Uint8;
    pub fn SDL_JoystickClose(joystick: *mut SDL_Joystick);
    pub fn SDL_GameControllerAddMapping(mappingString: *c_schar) -> c_int;
    pub fn SDL_GameControllerMappingForGUID(guid: SDL_JoystickGUID) ->
     *mut c_schar;
    pub fn SDL_GameControllerMapping(gamecontroller: *mut SDL_GameController)
     -> *mut c_schar;
    pub fn SDL_IsGameController(joystick_index: c_int) -> SDL_bool;
    pub fn SDL_GameControllerNameForIndex(joystick_index: c_int) -> *c_schar;
    pub fn SDL_GameControllerOpen(joystick_index: c_int) ->
     *mut SDL_GameController;
    pub fn SDL_GameControllerName(gamecontroller: *mut SDL_GameController) ->
     *c_schar;
    pub fn SDL_GameControllerGetAttached(gamecontroller:
                                             *mut SDL_GameController) ->
     SDL_bool;
    pub fn SDL_GameControllerGetJoystick(gamecontroller:
                                             *mut SDL_GameController) ->
     *mut SDL_Joystick;
    pub fn SDL_GameControllerEventState(state: c_int) -> c_int;
    pub fn SDL_GameControllerUpdate();
    pub fn SDL_GameControllerGetAxisFromString(pchString: *c_schar) ->
     SDL_GameControllerAxis;
    pub fn SDL_GameControllerGetStringForAxis(axis: SDL_GameControllerAxis) ->
     *c_schar;
    pub fn SDL_GameControllerGetBindForAxis(gamecontroller:
                                                *mut SDL_GameController,
                                            axis: SDL_GameControllerAxis) ->
     SDL_GameControllerButtonBind;
    pub fn SDL_GameControllerGetAxis(gamecontroller: *mut SDL_GameController,
                                     axis: SDL_GameControllerAxis) -> Sint16;
    pub fn SDL_GameControllerGetButtonFromString(pchString: *c_schar) ->
     SDL_GameControllerButton;
    pub fn SDL_GameControllerGetStringForButton(button:
                                                    SDL_GameControllerButton)
     -> *c_schar;
    pub fn SDL_GameControllerGetBindForButton(gamecontroller:
                                                  *mut SDL_GameController,
                                              button:
                                                  SDL_GameControllerButton) ->
     SDL_GameControllerButtonBind;
    pub fn SDL_GameControllerGetButton(gamecontroller:
                                           *mut SDL_GameController,
                                       button: SDL_GameControllerButton) ->
     Uint8;
    pub fn SDL_GameControllerClose(gamecontroller: *mut SDL_GameController);
    pub fn SDL_GetNumTouchDevices() -> c_int;
    pub fn SDL_GetTouchDevice(index: c_int) -> SDL_TouchID;
    pub fn SDL_GetNumTouchFingers(touchID: SDL_TouchID) -> c_int;
    pub fn SDL_GetTouchFinger(touchID: SDL_TouchID, index: c_int) ->
     *mut SDL_Finger;
    pub fn SDL_RecordGesture(touchId: SDL_TouchID) -> c_int;
    pub fn SDL_SaveAllDollarTemplates(src: *mut SDL_RWops) -> c_int;
    pub fn SDL_SaveDollarTemplate(gestureId: SDL_GestureID,
                                  src: *mut SDL_RWops) -> c_int;
    pub fn SDL_LoadDollarTemplates(touchId: SDL_TouchID, src: *mut SDL_RWops)
     -> c_int;
    pub fn SDL_PumpEvents();
    pub fn SDL_PeepEvents(events: *mut SDL_Event, numevents: c_int,
                          action: SDL_eventaction, minType: Uint32,
                          maxType: Uint32) -> c_int;
    pub fn SDL_HasEvent(_type: Uint32) -> SDL_bool;
    pub fn SDL_HasEvents(minType: Uint32, maxType: Uint32) -> SDL_bool;
    pub fn SDL_FlushEvent(_type: Uint32);
    pub fn SDL_FlushEvents(minType: Uint32, maxType: Uint32);
    pub fn SDL_PollEvent(event: *mut SDL_Event) -> c_int;
    pub fn SDL_WaitEvent(event: *mut SDL_Event) -> c_int;
    pub fn SDL_WaitEventTimeout(event: *mut SDL_Event, timeout: c_int) ->
     c_int;
    pub fn SDL_PushEvent(event: *mut SDL_Event) -> c_int;
    pub fn SDL_SetEventFilter(filter: SDL_EventFilter, userdata: *mut c_void);
    pub fn SDL_GetEventFilter(filter: *mut SDL_EventFilter,
                              userdata: *mut *mut c_void) -> SDL_bool;
    pub fn SDL_AddEventWatch(filter: SDL_EventFilter, userdata: *mut c_void);
    pub fn SDL_DelEventWatch(filter: SDL_EventFilter, userdata: *mut c_void);
    pub fn SDL_FilterEvents(filter: SDL_EventFilter, userdata: *mut c_void);
    pub fn SDL_EventState(_type: Uint32, state: c_int) -> Uint8;
    pub fn SDL_RegisterEvents(numevents: c_int) -> Uint32;
    pub fn SDL_NumHaptics() -> c_int;
    pub fn SDL_HapticName(device_index: c_int) -> *c_schar;
    pub fn SDL_HapticOpen(device_index: c_int) -> *mut SDL_Haptic;
    pub fn SDL_HapticOpened(device_index: c_int) -> c_int;
    pub fn SDL_HapticIndex(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_MouseIsHaptic() -> c_int;
    pub fn SDL_HapticOpenFromMouse() -> *mut SDL_Haptic;
    pub fn SDL_JoystickIsHaptic(joystick: *mut SDL_Joystick) -> c_int;
    pub fn SDL_HapticOpenFromJoystick(joystick: *mut SDL_Joystick) ->
     *mut SDL_Haptic;
    pub fn SDL_HapticClose(haptic: *mut SDL_Haptic);
    pub fn SDL_HapticNumEffects(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticNumEffectsPlaying(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticQuery(haptic: *mut SDL_Haptic) -> c_uint;
    pub fn SDL_HapticNumAxes(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticEffectSupported(haptic: *mut SDL_Haptic,
                                     effect: *mut SDL_HapticEffect) -> c_int;
    pub fn SDL_HapticNewEffect(haptic: *mut SDL_Haptic,
                               effect: *mut SDL_HapticEffect) -> c_int;
    pub fn SDL_HapticUpdateEffect(haptic: *mut SDL_Haptic, effect: c_int,
                                  data: *mut SDL_HapticEffect) -> c_int;
    pub fn SDL_HapticRunEffect(haptic: *mut SDL_Haptic, effect: c_int,
                               iterations: Uint32) -> c_int;
    pub fn SDL_HapticStopEffect(haptic: *mut SDL_Haptic, effect: c_int) ->
     c_int;
    pub fn SDL_HapticDestroyEffect(haptic: *mut SDL_Haptic, effect: c_int);
    pub fn SDL_HapticGetEffectStatus(haptic: *mut SDL_Haptic, effect: c_int)
     -> c_int;
    pub fn SDL_HapticSetGain(haptic: *mut SDL_Haptic, gain: c_int) -> c_int;
    pub fn SDL_HapticSetAutocenter(haptic: *mut SDL_Haptic, autocenter: c_int)
     -> c_int;
    pub fn SDL_HapticPause(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticUnpause(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticStopAll(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticRumbleSupported(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticRumbleInit(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_HapticRumblePlay(haptic: *mut SDL_Haptic, strength: c_float,
                                length: Uint32) -> c_int;
    pub fn SDL_HapticRumbleStop(haptic: *mut SDL_Haptic) -> c_int;
    pub fn SDL_SetHintWithPriority(name: *c_schar, value: *c_schar,
                                   priority: SDL_HintPriority) -> SDL_bool;
    pub fn SDL_SetHint(name: *c_schar, value: *c_schar) -> SDL_bool;
    pub fn SDL_GetHint(name: *c_schar) -> *c_schar;
    pub fn SDL_AddHintCallback(name: *c_schar, callback: SDL_HintCallback,
                               userdata: *mut c_void);
    pub fn SDL_DelHintCallback(name: *c_schar, callback: SDL_HintCallback,
                               userdata: *mut c_void);
    pub fn SDL_ClearHints();
    pub fn SDL_LoadObject(sofile: *c_schar) -> *mut c_void;
    pub fn SDL_LoadFunction(handle: *mut c_void, name: *c_schar) ->
     *mut c_void;
    pub fn SDL_UnloadObject(handle: *mut c_void);
    pub fn SDL_LogSetAllPriority(priority: SDL_LogPriority);
    pub fn SDL_LogSetPriority(category: c_int, priority: SDL_LogPriority);
    pub fn SDL_LogGetPriority(category: c_int) -> SDL_LogPriority;
    pub fn SDL_LogResetPriorities();
    pub fn SDL_Log(fmt: *c_schar);
    pub fn SDL_LogVerbose(category: c_int, fmt: *c_schar);
    pub fn SDL_LogDebug(category: c_int, fmt: *c_schar);
    pub fn SDL_LogInfo(category: c_int, fmt: *c_schar);
    pub fn SDL_LogWarn(category: c_int, fmt: *c_schar);
    pub fn SDL_LogError(category: c_int, fmt: *c_schar);
    pub fn SDL_LogCritical(category: c_int, fmt: *c_schar);
    pub fn SDL_LogMessage(category: c_int, priority: SDL_LogPriority,
                          fmt: *c_schar);
    pub fn SDL_LogGetOutputFunction(callback: *mut SDL_LogOutputFunction,
                                    userdata: *mut *mut c_void);
    pub fn SDL_LogSetOutputFunction(callback: SDL_LogOutputFunction,
                                    userdata: *mut c_void);
    pub fn SDL_ShowMessageBox(messageboxdata: *SDL_MessageBoxData,
                              buttonid: *mut c_int) -> c_int;
    pub fn SDL_ShowSimpleMessageBox(flags: Uint32, title: *c_schar,
                                    message: *c_schar,
                                    window: *mut SDL_Window) -> c_int;
    pub fn SDL_GetPowerInfo(secs: *mut c_int, pct: *mut c_int) ->
     SDL_PowerState;
    pub fn SDL_GetNumRenderDrivers() -> c_int;
    pub fn SDL_GetRenderDriverInfo(index: c_int, info: *mut SDL_RendererInfo)
     -> c_int;
    pub fn SDL_CreateWindowAndRenderer(width: c_int, height: c_int,
                                       window_flags: Uint32,
                                       window: *mut *mut SDL_Window,
                                       renderer: *mut *mut SDL_Renderer) ->
     c_int;
    pub fn SDL_CreateRenderer(window: *mut SDL_Window, index: c_int,
                              flags: Uint32) -> *mut SDL_Renderer;
    pub fn SDL_CreateSoftwareRenderer(surface: *mut SDL_Surface) ->
     *mut SDL_Renderer;
    pub fn SDL_GetRenderer(window: *mut SDL_Window) -> *mut SDL_Renderer;
    pub fn SDL_GetRendererInfo(renderer: *mut SDL_Renderer,
                               info: *mut SDL_RendererInfo) -> c_int;
    pub fn SDL_GetRendererOutputSize(renderer: *mut SDL_Renderer,
                                     w: *mut c_int, h: *mut c_int) -> c_int;
    pub fn SDL_CreateTexture(renderer: *mut SDL_Renderer, format: Uint32,
                             access: c_int, w: c_int, h: c_int) ->
     *mut SDL_Texture;
    pub fn SDL_CreateTextureFromSurface(renderer: *mut SDL_Renderer,
                                        surface: *mut SDL_Surface) ->
     *mut SDL_Texture;
    pub fn SDL_QueryTexture(texture: *mut SDL_Texture, format: *mut Uint32,
                            access: *mut c_int, w: *mut c_int, h: *mut c_int)
     -> c_int;
    pub fn SDL_SetTextureColorMod(texture: *mut SDL_Texture, r: Uint8,
                                  g: Uint8, b: Uint8) -> c_int;
    pub fn SDL_GetTextureColorMod(texture: *mut SDL_Texture, r: *mut Uint8,
                                  g: *mut Uint8, b: *mut Uint8) -> c_int;
    pub fn SDL_SetTextureAlphaMod(texture: *mut SDL_Texture, alpha: Uint8) ->
     c_int;
    pub fn SDL_GetTextureAlphaMod(texture: *mut SDL_Texture,
                                  alpha: *mut Uint8) -> c_int;
    pub fn SDL_SetTextureBlendMode(texture: *mut SDL_Texture,
                                   blendMode: SDL_BlendMode) -> c_int;
    pub fn SDL_GetTextureBlendMode(texture: *mut SDL_Texture,
                                   blendMode: *mut SDL_BlendMode) -> c_int;
    pub fn SDL_UpdateTexture(texture: *mut SDL_Texture, rect: *SDL_Rect,
                             pixels: *c_void, pitch: c_int) -> c_int;
    pub fn SDL_LockTexture(texture: *mut SDL_Texture, rect: *SDL_Rect,
                           pixels: *mut *mut c_void, pitch: *mut c_int) ->
     c_int;
    pub fn SDL_UnlockTexture(texture: *mut SDL_Texture);
    pub fn SDL_RenderTargetSupported(renderer: *mut SDL_Renderer) -> SDL_bool;
    pub fn SDL_SetRenderTarget(renderer: *mut SDL_Renderer,
                               texture: *mut SDL_Texture) -> c_int;
    pub fn SDL_GetRenderTarget(renderer: *mut SDL_Renderer) ->
     *mut SDL_Texture;
    pub fn SDL_RenderSetLogicalSize(renderer: *mut SDL_Renderer, w: c_int,
                                    h: c_int) -> c_int;
    pub fn SDL_RenderGetLogicalSize(renderer: *mut SDL_Renderer,
                                    w: *mut c_int, h: *mut c_int);
    pub fn SDL_RenderSetViewport(renderer: *mut SDL_Renderer, rect: *SDL_Rect)
     -> c_int;
    pub fn SDL_RenderGetViewport(renderer: *mut SDL_Renderer,
                                 rect: *mut SDL_Rect);
    pub fn SDL_RenderSetClipRect(renderer: *mut SDL_Renderer, rect: *SDL_Rect)
     -> c_int;
    pub fn SDL_RenderGetClipRect(renderer: *mut SDL_Renderer,
                                 rect: *mut SDL_Rect);
    pub fn SDL_RenderSetScale(renderer: *mut SDL_Renderer, scaleX: c_float,
                              scaleY: c_float) -> c_int;
    pub fn SDL_RenderGetScale(renderer: *mut SDL_Renderer,
                              scaleX: *mut c_float, scaleY: *mut c_float);
    pub fn SDL_SetRenderDrawColor(renderer: *mut SDL_Renderer, r: Uint8,
                                  g: Uint8, b: Uint8, a: Uint8) -> c_int;
    pub fn SDL_GetRenderDrawColor(renderer: *mut SDL_Renderer, r: *mut Uint8,
                                  g: *mut Uint8, b: *mut Uint8, a: *mut Uint8)
     -> c_int;
    pub fn SDL_SetRenderDrawBlendMode(renderer: *mut SDL_Renderer,
                                      blendMode: SDL_BlendMode) -> c_int;
    pub fn SDL_GetRenderDrawBlendMode(renderer: *mut SDL_Renderer,
                                      blendMode: *mut SDL_BlendMode) -> c_int;
    pub fn SDL_RenderClear(renderer: *mut SDL_Renderer) -> c_int;
    pub fn SDL_RenderDrawPoint(renderer: *mut SDL_Renderer, x: c_int,
                               y: c_int) -> c_int;
    pub fn SDL_RenderDrawPoints(renderer: *mut SDL_Renderer,
                                points: *SDL_Point, count: c_int) -> c_int;
    pub fn SDL_RenderDrawLine(renderer: *mut SDL_Renderer, x1: c_int,
                              y1: c_int, x2: c_int, y2: c_int) -> c_int;
    pub fn SDL_RenderDrawLines(renderer: *mut SDL_Renderer,
                               points: *SDL_Point, count: c_int) -> c_int;
    pub fn SDL_RenderDrawRect(renderer: *mut SDL_Renderer, rect: *SDL_Rect) ->
     c_int;
    pub fn SDL_RenderDrawRects(renderer: *mut SDL_Renderer, rects: *SDL_Rect,
                               count: c_int) -> c_int;
    pub fn SDL_RenderFillRect(renderer: *mut SDL_Renderer, rect: *SDL_Rect) ->
     c_int;
    pub fn SDL_RenderFillRects(renderer: *mut SDL_Renderer, rects: *SDL_Rect,
                               count: c_int) -> c_int;
    pub fn SDL_RenderCopy(renderer: *mut SDL_Renderer,
                          texture: *mut SDL_Texture, srcrect: *SDL_Rect,
                          dstrect: *SDL_Rect) -> c_int;
    pub fn SDL_RenderCopyEx(renderer: *mut SDL_Renderer,
                            texture: *mut SDL_Texture, srcrect: *SDL_Rect,
                            dstrect: *SDL_Rect, angle: c_double,
                            center: *SDL_Point, flip: SDL_RendererFlip) ->
     c_int;
    pub fn SDL_RenderReadPixels(renderer: *mut SDL_Renderer, rect: *SDL_Rect,
                                format: Uint32, pixels: *mut c_void,
                                pitch: c_int) -> c_int;
    pub fn SDL_RenderPresent(renderer: *mut SDL_Renderer);
    pub fn SDL_DestroyTexture(texture: *mut SDL_Texture);
    pub fn SDL_DestroyRenderer(renderer: *mut SDL_Renderer);
    pub fn SDL_GL_BindTexture(texture: *mut SDL_Texture, texw: *mut c_float,
                              texh: *mut c_float) -> c_int;
    pub fn SDL_GL_UnbindTexture(texture: *mut SDL_Texture) -> c_int;
    pub fn SDL_GetTicks() -> Uint32;
    pub fn SDL_GetPerformanceCounter() -> Uint64;
    pub fn SDL_GetPerformanceFrequency() -> Uint64;
    pub fn SDL_Delay(ms: Uint32);
    pub fn SDL_AddTimer(interval: Uint32, callback: SDL_TimerCallback,
                        param: *mut c_void) -> SDL_TimerID;
    pub fn SDL_RemoveTimer(id: SDL_TimerID) -> SDL_bool;
    pub fn SDL_GetVersion(ver: *mut SDL_version);
    pub fn SDL_GetRevision() -> *c_schar;
    pub fn SDL_GetRevisionNumber() -> c_int;
    pub fn SDL_Init(flags: Uint32) -> c_int;
    pub fn SDL_InitSubSystem(flags: Uint32) -> c_int;
    pub fn SDL_QuitSubSystem(flags: Uint32);
    pub fn SDL_WasInit(flags: Uint32) -> Uint32;
    pub fn SDL_Quit();
}
